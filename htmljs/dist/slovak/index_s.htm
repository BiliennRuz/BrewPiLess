<!DOCTYPE html>

<html lang="sk">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>
        BrewPiLess v prev√°dzke!
    </title>
    <meta name="apple-mobile-web-app-title" content="BrewPiLess">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <script type="text/javascript" src="/dygraph.min.js" ignore></script>
    <script>
/**
 * Synchronize zooming and/or selections between a set of dygraphs.
 *
 * Usage:
 *
 *   var g1 = new Dygraph(...),
 *       g2 = new Dygraph(...),
 *       ...;
 *   var sync = Dygraph.synchronize(g1, g2, ...);
 *   // charts are now synchronized
 *   sync.detach();
 *   // charts are no longer synchronized
 *
 * You can set options using the last parameter, for example:
 *
 *   var sync = Dygraph.synchronize(g1, g2, g3, {
 *      selection: true,
 *      zoom: true
 *   });
 *
 * The default is to synchronize both of these.
 *
 * Instead of passing one Dygraph object as each parameter, you may also pass an
 * array of dygraphs:
 *
 *   var sync = Dygraph.synchronize([g1, g2, g3], {
 *      selection: false,
 *      zoom: true
 *   });
 *
 * You may also set `range: false` if you wish to only sync the x-axis.
 * The `range` option has no effect unless `zoom` is true (the default).
 */
(function() {
/* global Dygraph:false */
'use strict';

var Dygraph;
if (window.Dygraph) {
  Dygraph = window.Dygraph;
} else if (typeof(module) !== 'undefined') {
  Dygraph = require('../dygraph');
}

var synchronize = function(/* dygraphs..., opts */) {
  if (arguments.length === 0) {
    throw 'Invalid invocation of Dygraph.synchronize(). Need >= 1 argument.';
  }

  var OPTIONS = ['selection', 'zoom', 'range'];
  var opts = {
    selection: true,
    zoom: true,
    range: true
  };
  var dygraphs = [];
  var prevCallbacks = [];

  var parseOpts = function(obj) {
    if (!(obj instanceof Object)) {
      throw 'Last argument must be either Dygraph or Object.';
    } else {
      for (var i = 0; i < OPTIONS.length; i++) {
        var optName = OPTIONS[i];
        if (obj.hasOwnProperty(optName)) opts[optName] = obj[optName];
      }
    }
  };

  if (arguments[0] instanceof Dygraph) {
    // Arguments are Dygraph objects.
    for (var i = 0; i < arguments.length; i++) {
      if (arguments[i] instanceof Dygraph) {
        dygraphs.push(arguments[i]);
      } else {
        break;
      }
    }
    if (i < arguments.length - 1) {
      throw 'Invalid invocation of Dygraph.synchronize(). ' +
            'All but the last argument must be Dygraph objects.';
    } else if (i == arguments.length - 1) {
      parseOpts(arguments[arguments.length - 1]);
    }
  } else if (arguments[0].length) {
    // Invoked w/ list of dygraphs, options
    for (var i = 0; i < arguments[0].length; i++) {
      dygraphs.push(arguments[0][i]);
    }
    if (arguments.length == 2) {
      parseOpts(arguments[1]);
    } else if (arguments.length > 2) {
      throw 'Invalid invocation of Dygraph.synchronize(). ' +
            'Expected two arguments: array and optional options argument.';
    }  // otherwise arguments.length == 1, which is fine.
  } else {
    throw 'Invalid invocation of Dygraph.synchronize(). ' +
          'First parameter must be either Dygraph or list of Dygraphs.';
  }

  if (dygraphs.length < 2) {
    throw 'Invalid invocation of Dygraph.synchronize(). ' +
          'Need two or more dygraphs to synchronize.';
  }

  var readycount = dygraphs.length;
  for (var i = 0; i < dygraphs.length; i++) {
    var g = dygraphs[i];
    g.ready( function() {
      if (--readycount == 0) {
        // store original callbacks
        var callBackTypes = ['drawCallback', 'highlightCallback', 'unhighlightCallback'];
        for (var j = 0; j < dygraphs.length; j++) {
          if (!prevCallbacks[j]) {
            prevCallbacks[j] = {};
          }
          for (var k = callBackTypes.length - 1; k >= 0; k--) {
            prevCallbacks[j][callBackTypes[k]] = dygraphs[j].getFunctionOption(callBackTypes[k]);
          }
        }

        // Listen for draw, highlight, unhighlight callbacks.
        if (opts.zoom) {
          attachZoomHandlers(dygraphs, opts, prevCallbacks);
        }

        if (opts.selection) {
          attachSelectionHandlers(dygraphs, prevCallbacks);
        }
      }
    });
  }

  return {
    detach: function() {
      for (var i = 0; i < dygraphs.length; i++) {
        var g = dygraphs[i];
        if (opts.zoom) {
          g.updateOptions({drawCallback: prevCallbacks[i].drawCallback});
        }
        if (opts.selection) {
          g.updateOptions({
            highlightCallback: prevCallbacks[i].highlightCallback,
            unhighlightCallback: prevCallbacks[i].unhighlightCallback
          });
        }
      }
      // release references & make subsequent calls throw.
      dygraphs = null;
      opts = null;
      prevCallbacks = null;
    }
  };
};

function arraysAreEqual(a, b) {
  if (!Array.isArray(a) || !Array.isArray(b)) return false;
  var i = a.length;
  if (i !== b.length) return false;
  while (i--) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}

function attachZoomHandlers(gs, syncOpts, prevCallbacks) {
  var block = false;
  for (var i = 0; i < gs.length; i++) {
    var g = gs[i];
    g.updateOptions({
      drawCallback: function(me, initial) {
        if (block || initial) return;
        block = true;
        var opts = {
          dateWindow: me.xAxisRange()
        };
        if (syncOpts.range) opts.valueRange = me.yAxisRange();

        for (var j = 0; j < gs.length; j++) {
          if (gs[j] == me) {
            if (prevCallbacks[j] && prevCallbacks[j].drawCallback) {
              prevCallbacks[j].drawCallback.apply(this, arguments);
            }
            continue;
          }

          // Only redraw if there are new options
          if (arraysAreEqual(opts.dateWindow, gs[j].getOption('dateWindow')) && 
              arraysAreEqual(opts.valueRange, gs[j].getOption('valueRange'))) {
            continue;
          }

          gs[j].updateOptions(opts);
        }
        block = false;
      }
    }, true /* no need to redraw */);
  }
}

function attachSelectionHandlers(gs, prevCallbacks) {
  var block = false;
  for (var i = 0; i < gs.length; i++) {
    var g = gs[i];

    g.updateOptions({
      highlightCallback: function(event, x, points, row, seriesName) {
        if (block) return;
        block = true;
        var me = this;
        for (var i = 0; i < gs.length; i++) {
          if (me == gs[i]) {
            if (prevCallbacks[i] && prevCallbacks[i].highlightCallback) {
              prevCallbacks[i].highlightCallback.apply(this, arguments);
            }
            continue;
          }
          var idx = gs[i].getRowForX(x);
          if (idx !== null) {
            gs[i].setSelection(idx, seriesName);
          }
        }
        block = false;
      },
      unhighlightCallback: function(event) {
        if (block) return;
        block = true;
        var me = this;
        for (var i = 0; i < gs.length; i++) {
          if (me == gs[i]) {
            if (prevCallbacks[i] && prevCallbacks[i].unhighlightCallback) {
              prevCallbacks[i].unhighlightCallback.apply(this, arguments);
            }
            continue;
          }
          gs[i].clearSelection();
        }
        block = false;
      }
    }, true /* no need to redraw */);
  }
}

Dygraph.synchronize = synchronize;

})();

</script>

    <script>
function invoke(arg) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4) {
            if (xhttp.status == 200) {
                arg.success(xhttp.responseText);
            } else {
                xhttp.onerror(xhttp.status);
            }
        }
    };
    xhttp.ontimeout = function() {
            if (typeof arg["timeout"] != "undefined")
                arg.timeout();
            else
                xhttp.onerror(-1);
        },
        xhttp.onerror = function(a) {
            if (typeof arg["fail"] != "undefined")
                arg.fail(a);
        };

    xhttp.open(arg.m, arg.url, true);
    if (typeof arg["data"] != "undefined") {
        xhttp.setRequestHeader("Content-Type", (typeof arg["mime"] != "undefined") ? arg["mime"] : "application/x-www-form-urlencoded");
        xhttp.send(arg.data);
    } else
        xhttp.send();
}

var BWF = {
//    BrewProfile: "/brewing.json",
    process: function(msg) {
        if (this.raw != null) {
            this.raw(msg);
            return;
        }
        //console.log("rcv:" + msg);
        eval("m={" + msg + "}");
        //	console.log("json:"+m);
        for (var key in m) {
            if (typeof this.handlers[key] != "undefined") {
                this.handlers[key](m[key]);
            }
        }
    },
    on: function(lb, handler) {
        this.handlers[lb] = handler;
    },
    send: function(data) {
        if (this.ws.readyState == 1) this.ws.send(data);
    },
    reconnecting: false,
    status:function(){
        if(typeof this.ws == "undefined") return -1; // not initialized
        if(this.ws.readyState == 1) return 0;
        return 1;  
    },
    connect: function() {
        var me = this;
        if (typeof WebSocket !== "undefined") {
            var ws = new WebSocket('ws://' + document.location.host + '/ws');
            me.ws = ws;
            ws.onopen = function() {
                console.log("Connected");
                me.onconnect();
            };

            ws.onclose = function() {
                if (me.reconnecting) return;
                console.log("WS close");
                me.error(-2);
                if (me.auto) setTimeout(function() { me.reconnect(); }, 5000);
            };

            /*ws.onerror = function() {
                console.log("ws error");
            };*/

            ws.onmessage = function(e) {
                me.process(e.data);
            };
        } else {
            //console.log("not support WebSocket");
            alert("Error! WebSocket Not Supported!");
        }
    },
    reconnect: function(forced) {
        forced = (typeof forced == "undefined") ? false : true;
        var me = this;
        if (me.reconnecting) return;
        if (!forced && me.ws.readyState == 1) return;
        console.log("reconnect forced:" + forced + " state:" + me.ws.readyState);
        me.reconnecting = true;
        me.ws.close();
        // this might triger onerror, and result in "reconnect" call again.
        me.connect();
        me.reconnecting = false;
    },
    init: function(arg) {
        var b = this;
        b.error = (typeof arg.error == "undefined") ? function() {} : arg.error;
        b.handlers = (typeof arg.handlers == "undefined") ? {} : arg.handlers;
        b.raw = (typeof arg.raw == "undefined") ? null : arg.raw;
        b.onconnect = (typeof arg.onconnect == "undefined") ? function() {} : arg.onconnect;
        b.auto = (typeof arg.reconnect == "undefined") ? true : arg.reconnect;

        b.connect();
    },
    save: function(file, data, success, fail) {
        invoke({
            m: "POST",
            url: "/fputs",
            data: "path=" + file + "&content=" + encodeURIComponent(data),
            success: function() { success(); },
            fail: function(e) { fail(e); }
        });
    },
    load: function(file, success, fail) {
        invoke({
            m: "GET",
            url: file,
            success: function(d) { success(d); },
            fail: function(e) { fail(e); }
        });
    }
};
</script>
    <script>
/* chart.js */
var  CHART_VERSION = 6;
         
        // gravity tracking
        var GravityFilter = {
            b: 0.1,
            y: 0,
            reset: function() {
                this.y = 0;
            },
            add: function(gravity) {
                if (this.y == 0) this.y = gravity;
                else this.y = this.y + this.b * (gravity - this.y);
                return Math.round(this.y * 10000) / 10000;
            },
            setBeta: function(beta) {
                this.b = beta;
            }
        };
        var GravityTracker = {
            NumberOfSlots: 48,
            InvalidValue: 0xFF,
            ridx: 0,
            record: [],
            threshold: 1,
            setThreshold: function(t) {
                this.threshold = t;
            },
            addRecord: function(v) {
                this.record[this.ridx++] = v;
                if (this.ridx >= this.NumberOfSlots) this.ridx = 0;
            },
            stable: function(duration, to) {
                to = (typeof to == "undefined") ? this.threshold : to;
                var current = this.ridx - 1;
                if (current < 0) current = this.NumberOfSlots - 1;
                var previous = this.NumberOfSlots + this.ridx - duration;
                while (previous >= this.NumberOfSlots) previous -= this.NumberOfSlots;
                return (this.record[previous] - this.record[current]) <= to;
            },
            Period: 60 * 60,
            init: function() {
                this.curerntStart = 0;
                this.lastValue = 0;
            },
            add: function(gravity, time) {
                //gravity = Math.round(fgravity * 1000, 1);
                var timediff = time - this.curerntStart;

                if (timediff > this.Period) {
                    this.addRecord(gravity);
                    if (this.lastValue != 0) {
                        timediff -= this.Period;
                        while (timediff > this.Period) {
                            timediff -= this.Period;
                            this.addRecord(this.lastValue);
                        }
                    }
                    this.curerntStart = time;
                    this.lastValue = gravity;
                }
            }
        };


        function fgstate(duration) {
            var Color = {
                0: "red",
                12: "orange",
                24: "yellow",
                48: "green"
            };
            Q("#fgstate").style.backgroundColor = Color[duration];
        }

        function checkfgstate() {
            if (GravityTracker.stable(12)) {
                if (GravityTracker.stable(24)) {
                    if (GravityTracker.stable(48)) fgstate(48);
                    else fgstate(24); // 24
                } else fgstate(12); // 
            } else fgstate(0);
        }
        // gravity tracking
        var GravityAndTiltIndex = 6;
        var PSIIndex = 7;
        var RoomTemperatureIndex = 4;

        var BrewChart = function(div) {
            var t = this;
            t.cid = div;
            t.ctime = 0;
            t.interval = 60;
            t.numLine = 7;
            t.numData = 8;
            t.calculateSG = false;
            t.calibrating = false;

            t.lidx = 0;
            t.celius = true;
            t.clearData();
        };
        var colorIdle = "white";
        var colorCool = "rgba(0, 0, 255, 0.4)";
        var colorHeat = "rgba(255, 0, 0, 0.4)";
        var colorWaitingHeat = "rgba(255, 0, 0, 0.2)";
        var colorWaitingCool = "rgba(0, 0, 255, 0.2)";
        var colorHeatingMinTime = "rgba(255, 0, 0, 0.6)";
        var colorCoolingMinTime = "rgba(0, 0, 255, 0.6)";
        var colorWaitingPeakDetect = "rgba(0, 0, 0, 0.2)";

        // line colors

        var ColorBeerTemp="rgb(41,170,41)";
        var ColorBeerSet ="rgb(240, 100, 100)";
        var ColorFridgeTemp="rgb(89, 184, 255)";
        var ColorFridgeSet ="rgb(255, 161, 76)";
        var ColorRoomTemp = "#AAAAAA";
        var ColorAuxTemp =  "#f5e127";
        var ColorGravity="rgb(153,0,153)";
        var ColorFiltersg ="#000abb";

        var colorPressure="#0000EE";
        var colorPressureSet="rgb(240, 100, 100)";
        var colorCarbonation="gray";

        var colorHumidity="#2222DD";
        var colorHumiditySet="#EE1111";
        var colorRoomHumidity="#AAAAAA";

        var STATE_LINE_WIDTH = 15;
        var STATES = [{
            name: "IDLE",
            color: colorIdle,
            text: "Neƒçinn√Ω"
        }, {
            name: "STATE_OFF",
            color: colorIdle,
            text: "Vypnut√Ω"
        }, {
            name: "DOOR_OPEN",
            color: "#eee",
            text: "Dvere otvoren√©",
            doorOpen: true
        }, {
            name: "HEATING",
            color: colorHeat,
            text: "Ohrievanie"
        }, {
            name: "COOLING",
            color: colorCool,
            text: "Chladenie"
        }, {
            name: "WAITING_TO_COOL",
            color: colorWaitingCool,
            text: "ƒåakanie na vychladnutie",
            waiting: true
        }, {
            name: "WAITING_TO_HEAT",
            color: colorWaitingHeat,
            text: "ƒåakanie na ohrev",
            waiting: true
        }, {
            name: "WAITING_FOR_PEAK_DETECT",
            color: colorWaitingPeakDetect,
            text: "ƒåakanie na maximum",
            waiting: true
        }, {
            name: "COOLING_MIN_TIME",
            color: colorCoolingMinTime,
            text: "Min. ƒças chladenia",
            extending: true
        }, {
            name: "HEATING_MIN_TIME",
            color: colorHeatingMinTime,
            text: "Min. ƒças ohrevu",
            extending: true
        }, {
            name: "INVALID",
            color: colorHeatingMinTime,
            text: "Neplatn√Ω stav"
        }];
        BrewChart.Mode = {
            b: "Beer Constant",
            f: "Fridge Constant",
            o: "Off",
            p: "Profile"
        };



        BrewChart.Colors = [ColorBeerSet,ColorBeerTemp, ColorFridgeTemp, ColorFridgeSet, ColorRoomTemp, ColorAuxTemp,ColorGravity, ColorFiltersg,
                        colorPressure,colorPressureSet,colorCarbonation,
                        colorHumidity,colorHumiditySet,colorRoomHumidity];
        BrewChart.Labels = ['Time', 'beerSet', 'beerTemp', 'fridgeTemp', 'fridgeSet', 'roomTemp', 'auxTemp', 'gravity', 'filtersg'];
        BrewChart.ClassLabels = ['', 'beer-set', 'beer-temp', 'fridge-temp', 'fridge-set', 'room-temp', 'aux-temp', 'gravity', 'filtersg',
                            'pressure','pressure-set','carbonation',
                            'humidity','humidity-set','room-humidity'];

        var BeerSetLine = 1;
        var BeerTempLine = 2;
        var FridgeTempLine = 3;
        var FridgeSetLine = 4;
        var RoomTempLine = 5;
        var AuxTempLine = 6;
        var GravityLine = 7;
        var FilteredSgLine = 8;

        var PressureLine = 9;
        var PressureSetLine = 10;
        var CarbonationLine = 11;


        var ChamberHumidityLine = 12;
        var SetHumidityLine = 13;
        var RoomHumidityLine = 14;

        var NumberOfLines =14;

        var PSIDataIndex = 8;

        BrewChart.prototype.clearData = function() {
            this.laststat = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,NaN];
            this.sg = NaN;
            this.og = NaN;
        };

        BrewChart.prototype.setCelius = function(c) {
            this.celius = c;
            this.ylabel(STR.ChartLabel + '(' + (c ? "¬∞C" : "¬∞F") + ')');
        };

        BrewChart.prototype.incTime = function() {
            // format time, use hour and minute only.
            this.ctime += this.interval;
            //	console.log("incTime:"+ this.ctime/this.interval);
        };

        BrewChart.prototype.formatDate = function(d) {
            var HH = d.getHours();
            var MM = d.getMinutes();
            var SS = d.getSeconds();

            function T(x) {
                return (x > 9) ? x : ("0" + x);
            }
            return d.toLocaleDateString() + " " + T(HH) + ":" + T(MM) + ":" + T(SS);
        };

        BrewChart.prototype.formatDuration = function(elapsed) {
            var str = "";
            var days = Math.floor(elapsed / 86400);
            if (days > 0) {
                str = days + "d";
                elapsed -= days * 86400;
            }
            var hours = elapsed / 3600;
            str = str + hours.toFixed(1) + "h";
            return str;
        };

        BrewChart.prototype.showLegend = function(date, row) {
            var d = new Date(date);
            Q(".beer-chart-legend-time").innerHTML = this.formatDate(d);
            if (Q(".beer-chart-legend-elapse")) Q(".beer-chart-legend-elapse").innerHTML = this.formatDuration(d.getTime() / 1000 - this.starttime);

            Q(".chart-legend-row.beer-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, BeerTempLine));
            Q(".chart-legend-row.beer-set .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, BeerSetLine));
            Q(".chart-legend-row.fridge-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, FridgeTempLine));
            Q(".chart-legend-row.fridge-set .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, FridgeSetLine));
            Q(".chart-legend-row.room-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, RoomTempLine));

            Q(".chart-legend-row.aux-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, AuxTempLine));

            var g = this.chart.getValue(row, GravityLine);
            Q(".chart-legend-row.gravity .legend-value").innerHTML = (!g || isNaN(g)) ? "--" : (this.plato ? g.toFixed(2) + "&deg;P" : g.toFixed(4));
            var filteredG = this.chart.getValue(row, FilteredSgLine);
            Q(".chart-legend-row.filtersg .legend-value").innerHTML = (!filteredG || isNaN(filteredG)) ? "--" : (this.plato ? filteredG.toFixed(2) + "&deg;P" : filteredG.toFixed(4));

            var state = parseInt(this.state[row]);
            if (!isNaN(state)) {
                Q('.beer-chart-state').innerHTML = STATES[state].text;
            }
            if(this.psiAvail){
                var psi = this.pchart.getValue(row, 1);
                Q(".chart-legend-row.pressure .legend-value").innerHTML = (psi == null || isNaN(psi))? "--":psi.toFixed(1);
                var psiSet=this.pchart.getValue(row, 2 );
                Q(".chart-legend-row.pressure-set .legend-value").innerHTML = (psiSet == null || isNaN(psiSet))? "--":Math.round(psiSet);
                var carbo=this.pchart.getValue(row, 3 );
                Q(".chart-legend-row.carbonation .legend-value").innerHTML = (carbo == null || isNaN(carbo))? "--":carbo.toFixed(1);
            }
            if(this.rhValid){
                var rh = this.hchart.getValue(row, 1);
                Q(".chart-legend-row.humidity .legend-value").innerHTML = (isNaN(rh) || rh == null || rh==255)? "--":(rh+"%");
                var sh = this.hchart.getValue(row, 2);
                Q(".chart-legend-row.set-humidity .legend-value").innerHTML = (isNaN(sh) || sh == null || sh==255)? "--":(sh+"%");
                var room = this.hchart.getValue(row, 3);
                Q(".chart-legend-row.room-humidity .legend-value").innerHTML = (isNaN(room) || room == null || room==255)? "--":(room+"%");
            }

        };

        BrewChart.prototype.hideLegend = function() {
            var v = document.querySelectorAll(".legend-value");

            v.forEach(function(val) {
                val.innerHTML = "--";
            });
            Q(".beer-chart-legend-time").innerHTML = this.dateLabel; //"Date/Time";
            Q('.beer-chart-state').innerHTML = "stav";
        };

        BrewChart.prototype.tempFormat = function(y) {
            var v = parseFloat(y);
            if (isNaN(v)) return "--";
            var DEG = this.celius ? "&deg;C" : "&deg;F";
            return parseFloat(v).toFixed(2) + DEG;
        };
        BrewChart.prototype.initLegend = function() {
            // init color
            if (Q(".beer-temp .toggle")) {
                for (var i = 1; i < BrewChart.ClassLabels.length; i++) {
                    var label = BrewChart.ClassLabels[i];
                    Q(".chart-legend-row." + label).style.color = BrewChart.Colors[i - 1];
                    Q("." + label + ".toggle").style.backgroundColor = BrewChart.Colors[i - 1];
                }
            }
            this.dateLabel = Q(".beer-chart-legend-time").innerHTML;
        };
        BrewChart.prototype.toggleLine = function(line) {
            var me=this;
            me.shownlist[line] = !me.shownlist[line];
            var divclass = BrewChart.ClassLabels[line];
            
            var chart = (line >= ChamberHumidityLine)? me.hchart:(line >= PressureLine)? me.pchart:me.chart;
            var base=(line >= ChamberHumidityLine)? ChamberHumidityLine:(line >= PressureLine)? PressureLine:1;
            chart.setVisibility(line - base, me.shownlist[line]);

            if (Q("." + divclass + " .toggle")) Q("." + divclass + " .toggle").style.backgroundColor =
                (me.shownlist[line])? Q(".chart-legend-row." + divclass).style.color:"transparent";
        };
        BrewChart.prototype.setLabels = function(y1, y2) {
            this.ylabel = y1;
            this.y2label = y2;
        };
        BrewChart.prototype.setPChart = function(id,label,carbonation) {
            this.pcid=id;
            this.plabel=label;
            this.clabel=carbonation;
        };
        BrewChart.prototype.createPSIChart = function() {
            var t=this;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            document.body.appendChild(ldiv);
            var opt = {
                labels: ["Time","psi","psiset","co2"],
                colors: BrewChart.Colors.slice(PressureLine-1,CarbonationLine),
                connectSeparatedPoints: true,
                ylabel: t.plabel,
                y2label: t.clabel,
                series: {
                    'co2': {
                        axis: 'y2',
                        drawPoints: false
                    }
                }, 

                axisLabelFontSize: 12,
//                animatedZooms: true,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                //displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                axes: {
                    y: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    },
                    y2: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    }
                }, 
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                }
            };
            t.pchart = new Dygraph(document.getElementById(t.pcid), t.psi, opt);
            t.pchart.setVisibility(0,true);
        };
        BrewChart.prototype.createChart = function() {
            var t = this;
            t.initLegend();
            t.shownlist =[];
            for(var i=0;i<=NumberOfLines;i++) t.shownlist.push(true);
            t.showPsi = true;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            var ylabel = (t.ylabel ? t.ylabel : 'Temperature') + '(&deg;' + (t.celius ? 'C' : 'F') + ')';
            var y2label = t.y2label ? t.y2label : 'Gravity';
            document.body.appendChild(ldiv);
            var opt = {
                labels: BrewChart.Labels,
                colors: BrewChart.Colors.slice(0,FilteredSgLine),
                connectSeparatedPoints: true,
                ylabel: ylabel,
                y2label: y2label,
                series: {
                    'gravity': {
                        axis: 'y2',
                        drawPoints: true,
                        pointSize: 2,
                        highlightCircleSize: 4
                    },
                    'filtersg': {
                        axis: 'y2',
                    }
                },
                axisLabelFontSize: 12,
                animatedZooms: true,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                axes: {
                    y: {
                        valueFormatter: function(y) {
                            return t.tempFormat(y);
                        }
                    },
                    y2: {
                        valueFormatter: function(y) {
                            return t.plato ? y.toFixed(1) : y.toFixed(3);
                        },
                        axisLabelFormatter: function(y) {
                            var range = this.yAxisRange(1);
                            if (t.plato) return (range[1] - range[0] > 1) ? y.toFixed(1) : y.toFixed(2);

                            if (range[1] - range[0] > 0.002)
                                return y.toFixed(3).substring(1);
                            else
                                return y.toFixed(4).substring(2);
                        }
                    }
                },
                highlightCircleSize: 2,
                highlightSeriesOpts: {
                    strokeWidth: 1.5,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                },
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                },
                underlayCallback: function(ctx, area, graph) {
                        ctx.save();
                        try {
                            t.drawBackground(ctx, area, graph);
                        } finally {
                            ctx.restore();
                        }
                }
/*                ,
                interactionModel:{ 
                    mousedown: Dygraph.defaultInteractionModel.mousedown, 
                    mousemove: Dygraph.defaultInteractionModel.mousemove, 
                    mouseup: Dygraph.defaultInteractionModel.mouseup, 
//                    touchstart:Dygraph.defaultInteractionModel.touchstart,
                    touchstart: function(event, g, context){
                        event.stopPropagation();
                        t.chart.setSelection(t.findNearestRow(g,t.chart.toDataXCoord(event.touches[0].clientX)));
                    }, 
                    touchend: Dygraph.defaultInteractionModel.mouseup, 
//                    touchend:function(event,g,context){
//                    },
//                    touchmove: Dygraph.defaultInteractionModel.touchmove
                    touchmove:function(event,g,context){
                        event.stopPropagation();
                        t.chart.setSelection(t.findNearestRow(g,t.chart.toDataXCoord(event.touches[0].clientX)));
                    }
                }
*/
                    /*                drawCallback: function(beerChart, is_initial) {
                                        if (is_initial) {
                                            if (t.anno.length > 0) {
                                                t.chart.setAnnotations(t.anno);
                                            }
                                        }
                                    }*/
            };
            t.chart = new Dygraph(document.getElementById(t.cid), t.data, opt);
        };

        BrewChart.prototype.findNearestRow = function(g, time) {
            "use strict";
            var low = 0,
                high = g.numRows() - 1;
            var mid, comparison;

            while (low < high) {
                mid = Math.floor((low + high) / 2);
                comparison = g.getValue(mid, 0) - time;
                if (comparison < 0) {
                    low = mid + 1;
                    continue;
                }
                if (comparison > 0) {
                    high = mid - 1;
                    continue;
                }
                return mid;
            }
            return low;
        };
        BrewChart.prototype.findStateBlocks = function(g, start, end) {
            "use strict";
            var result = [];
            var state = this.state[start]; //getState(g, start);             // current state
            var newState;
            for (var i = start; i < end; i++) { // find the next change
                newState = this.state[i]; //getState(g, i);
                if (newState !== state) {
                    result.push({
                        row: i,
                        state: state
                    });
                    state = newState;
                }
            }
            result.push({
                row: end,
                state: state
            });
            return result;
        };
        BrewChart.prototype.getTime = function(g, row) {
            "use strict";
            if (row >= g.numRows()) {
                row = g.numRows() - 1;
            }
            return g.getValue(row, 0);
        };
        BrewChart.prototype.drawBackground = function(ctx, area, graph) {
            var timeStart = graph.toDataXCoord(area.x);
            var timeEnd = graph.toDataXCoord(area.x + area.w);
            // the data rows for the range we are interested in. 0-based index. This is deliberately extended out one row
            // to be sure the range is included
            var rowStart = Math.max(this.findNearestRow(graph, timeStart) - 1, 0);
            var rowEnd = this.findNearestRow(graph, timeEnd) + 1;
            if (rowStart === null || rowEnd === null) {
                return;
            }
            var blocks = this.findStateBlocks(graph, rowStart, rowEnd); // rowEnd is exclusive

            var startX = 0; // start drawing from 0 - the far left
            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                var row = block.row; // where this state run ends
                var t = this.getTime(graph, row); // convert to time. Using time ensures the display matches the plotted resolution
                // of the graph.
                var r = (t - timeStart) / (timeEnd - timeStart); // as a fraction of the entire display
                var endX = Math.floor(area.x + (area.w * r));

                var state = STATES[parseInt(block.state, 10)];
                if (state === undefined) {
                    state = STATES[0];
                }
                //var borderColor = (state.waiting || state.extending) ? setAlphaFactor(state.color, 0.5) : undefined;
                //var bgColor = (state.waiting) ? bgColor = colorIdle : state.color;
                ctx.fillStyle = state.color;
                ctx.fillRect(startX, area.h - STATE_LINE_WIDTH, endX - startX, area.h);
                startX = endX;
            }
        };
        BrewChart.prototype.addMode = function(m, x) {
            var s = String.fromCharCode(m);
            this.anno.push({
                series: "beerTemp",
                x: x,
                shortText: s.toUpperCase(),
                text: BrewChart.Mode[s],
                attachAtBottom: true
            });
        };

        BrewChart.testData = function(data) {
            if (data[0] != 0xFF) return false;
            var s = data[1] & 0x07;
            if (s != CHART_VERSION) return false;

            return {
                sensor: s,
                f: data[1] & 0x10
            };
        };

        BrewChart.prototype.addResume = function(delta) {
            this.anno.push({
                series: "beerTemp",
                x: this.ctime * 1000,
                shortText: 'R',
                text: 'Resume',
                attachAtBottom: true
            });
        };

        BrewChart.prototype.getTiltAround = function(idx) {
            var t = this;
            var left = -1;
            var right = -1;

            if (t.angles[idx] != null) return [t.angles[idx], t.data[idx][AuxTempLine]];

            for (var i = idx - 1; i >= 0; i--) {
                if (t.angles[i] != null) {
                    left = i;
                    break;
                }
            }
            for (var i = idx + 1; i < t.angles.length > 0; i++) {
                if (t.angles[i] != null) {
                    right = i;
                    break;
                }
            }
            if (left < 0 && right < 0) return null;
            if (left < 0) return [t.angles[right], t.data[right][AuxTempLine]];
            if (right < 0) return [t.angles[left], t.data[left][AuxTempLine]];
            return [t.angles[left] + (t.angles[right] - t.angles[left]) / (right - left) * (idx - left),
                (t.data[left][AuxTempLine] + t.data[right][AuxTempLine]) / 2
            ];
        };

        BrewChart.prototype.getCalibration = function() {
            var pairs = [];
            for (var i = 0; i < this.data.length; i++) {
                if (this.rawSG[i]) {
                    var data = this.getTiltAround(i);
                    // corrected the reading into current beer data
                    if (data) {
                        var beerTemp = this.celius ? C2F(data[1]) : data[1];
                        var gravity = this.rawSG[i];
                        var converted;
                        if (this.plato)
                            converted = BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(gravity), C2F(this.coTemp), beerTemp));
                        else converted = BrewMath.tempCorrectionF(gravity, C2F(this.coTemp), beerTemp);
                        pairs.push([data[0], converted]);
                    }
                }
            }
            pairs.push([this.tiltInWater, this.readingInWater]);
            return pairs;
        };
        BrewChart.prototype.filterPoints = function(points, mask) {
            var nps = [];
            for (var i = 0; i < points.length; i++) {
                if (!(mask & (0x1 << i))) nps.push(points[i]);
            }
            return nps;
        };

        BrewChart.prototype.setIgnoredMask = function(mask) {
            if (this.cal_igmask == mask) return false;
            this.cal_igmask = mask;
            return true;
        };

        BrewChart.prototype.getFormula = function() {
            var points = this.getCalibration();
            if (points.length < 2) return;
            var cpoints = this.filterPoints(points, this.cal_igmask);
            if (cpoints.length < 2) {
                cpoints = points;
                this.cal_igmask = 0;
            }
            var poly = regression('polynomial', cpoints, (cpoints.length > 3) ?
                3 : ((cpoints.length > 2) ? 2 : 1), {
                    precision: 9
                });
            this.calibrationPoints = points;
            //this.equation = poly.equation;
            this.calculateSG = true;

            this.sgByTilt = (cpoints.length > 3) ?
                function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x +
                        poly.equation[3] * x * x * x;
                } : ((cpoints.length > 2) ? function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x;
                } : function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x;
                });

            this.coefficients = (cpoints.length > 3) ? [poly.equation[0], poly.equation[1], poly.equation[2], poly.equation[3]] :
                ((cpoints.length > 2) ? [poly.equation[0], poly.equation[1], poly.equation[2], 0] : [poly.equation[0], poly.equation[1], 0, 0]);
            this.npt = points.length;
        };
        BrewChart.prototype.process = function(data) {
            var newchart = false;
            var sgPoint = false;
            var t = this;
            //t.raw = data;
            t.filterSg = null;
            for (var i = 0; i < data.length;) {
                var d0 = data[i++];
                var d1 = data[i++];
                if (d0 == 0xFF) { // header. 
                    if ((d1 & 0xF) != CHART_VERSION) {
                        alert("Verzia z√°znamu je nespr√°vna!");
                        return;
                    }
                    //console.log(""+t.ctime/t.interval +" header");
                    t.celius = (d1 & 0x10) ? false : true;
                    t.calibrating = (d1 & 0x20) ? false : true;
                    t.plato = (d1 & 0x40) ? false : true;

                    var p = data[i++];
                    p = p * 256 + data[i++];
                    t.interval = p;
                    // 
                    t.starttime = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                    t.ctime = t.starttime;
                    i += 4;
                    t.data = [];
                    t.anno = [];
                    t.state = [];
                    t.angles = [];
                    t.rawSG = [];
                    t.psi = [];
                    t.cstate = 0;
                    t.coTemp = 20;
                    t.cal_igmask = 0;
                    t.specificGravity = null;
                    t.rh=[];
                    t.lastRh=255;
                    t.lastRoomRh=255;
                    t.lastSetRh=255;
                    t.rhValid=false;

                    t.targetPsi = NaN; // to denote "no line/point"

                    this.clearData();
                    newchart = true;
                    t.psiAvail = false;
                    // gravity tracking
                    GravityFilter.reset();
                    GravityTracker.init();
                    // gravity tracking
                } else if (d0 == 0xF3) { // correction temperature
                    t.coTemp = d1; // always celisus
                } else if (d0 == 0xF4) { // mode
                    //console.log(""+t.ctime/t.interval +" Stage:"+d1);
                    t.addMode(d1, t.ctime * 1000);
                } else if (d0 == 0xF5) { // targetPSI
                    t.targetPsi = (d1==0)? NaN:d1;
                } else if (d0 == 0xF1) { // state
                    t.cstate = d1;
                } else if (d0 == 0xF6) { // Time Sync
                    var utime = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                    if(utime > t.ctime) t.ctime =utime;
                } else if (d0 == 0xFE) { // resume
                    t.lidx = 0;
                    var d2 = data[i++];
                    var d3 = data[i++];
                    var tdiff = d3 + (d2 << 8) + (d1 << 16);
                    if(tdiff > 30*24*60*60) tdiff= 30*60; // it's wrong if it's too long.
                    var ntime = t.starttime + tdiff;
                    if (ntime > t.ctime) {
                        // add a gap to it                   
                        t.data.push([new Date(t.ctime * 1000), NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]);
                        t.state.push(null);
                        t.angles.push(null);
                        t.rawSG.push[null];

                        if (ntime - t.ctime > t.interval)
                            t.ctime = ntime;
                        else
                            t.ctime += t.interval;
                    }
                    t.addResume(d1);
                    // drop the data
                    /*
                    if (t.lidx) {
                        var idx;
                        for (idx = t.lidx; idx < t.numLine; idx++) t.dataset.push(NaN);
                        t.data.push(t.dataset);
                        t.state.push(null);
                        t.angles.push(null);
                        t.rawSG.push[null];
                    }*/
                } else if (d0 == 0xFC) { //Humidity
                    
                    if(d1 != 0xFF){
                        if(d1 & 0x80){ // room
                            t.lastRoomRh = d1 & 0x7F;
                            t.rhValid=true;
                        }else{
                            t.lastRh = d1;
                            t.rhValid=true;
                        }
                    }else if(t.rhValid){
                        t.lastRh = d1;
                    }
                } else if (d0 == 0xFD) { //Humidity target
                    t.lastSetRh = d1;
                } else if (d0 == 0xF8) { //OG
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    t.og = t.plato ? v / 100 : v / 10000;
                } else if (d0 == 0xFB) { //SG
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    t.specificGravity = t.plato ? v / 100 : v / 10000;
                    // setting sgPoint is useless in this version, because the data isnot yet push into array
                    //sgPoint = true;
                } else if (d0 == 0xFA) { //Ignored mask
                    var b2 = data[i++];
                    var b3 = data[i++];
                    t.cal_igmask = (d1 << 14) + (b2 << 7) + b3;
                } else if (d0 == 0xF9) { //Tilt in water
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    t.tiltInWater = v / 100;
                    //
                    if (t.plato) t.readingInWater = 0;
                    else t.readingInWater = (d1 == 0) ? 1.0 : (0.9 + d1 / 1000);
                } else if (d0 == 0xF0) { // record
                    t.changes = d1;
                    t.lidx = 0;
                    var d = new Date(this.ctime * 1000);
                    //t.incTime(); // add one time interval
                    t.dataset = [d];
                    if(t.processRecord() && t.calibrating) sgPoint=true;
                    
                } else if (d0 < 128) { // temp. or gravity
                    var tp = d0 * 256 + d1;
                    if (t.lidx == GravityAndTiltIndex) {
                        // gravity or gravity
                        if(t.calibrating){
                            // tilt value
                            tp = (tp == 0x7FFF) ? NaN : (tp / 100);
                        }else{
                            tp = (tp == 0x7FFF) ? NaN : (t.plato ? tp / 100 : ((tp > 8000) ? tp / 10000 : tp / 1000));
                            sgPoint = true;
                        }
                    } else if (t.lidx == PSIIndex) {
                        // pressure
                        if(tp == 0x7FFF) tp=null;
                        else tp =  tp / 10 - 100;
                        
                    } else {
                        // temperature
                        tp = (tp == 0x7FFF) ? NaN : tp / 100;
                        if (tp >= 225) tp = 225 - tp;
                    }

                    if (t.lidx < t.numData) {
                        if (typeof t.dataset != "undefined") {
                            t.dataset.push(tp);
                            t.laststat[t.lidx] = tp;
                            t.lidx++;
                            if(t.processRecord() && t.calibrating) sgPoint=true;
                        } else {
                            console.log("Error: missing tag.");
                        }
                    } else {
                        console.log("Error: data overlap?");
                    }
                }
            }
            return {
                nc: newchart,
                sg: sgPoint
            };
        };
        BrewChart.prototype.getXRange = function() {
            if (typeof this.chart == "undefined") return [0, 0];
            return this.chart.xAxisRange();
        };
        BrewChart.prototype.setXRange = function(range) {
            if (typeof this.chart == "undefined") return;
            this.chart.updateOptions({ dateWindow: range });
        };
        BrewChart.prototype.desync=function(){
            if(typeof this.sync != "undefined") this.sync.detach();
        };
        BrewChart.prototype.synchronize=function(){
            var t=this;
            var charts=[t.chart];
            if(t.psiAvail) charts.push(t.pchart);
            if(t.rhValid) charts.push(t.hchart);
            if(charts.length >1) t.sync = Dygraph.synchronize(charts,{selection: true,zoom:true,range:false});
        };
        BrewChart.prototype.updateChart = function() {
            var t = this;
            if (typeof t.chart == "undefined") t.createChart();
            else t.chart.updateOptions({
                'file': t.data
            });
            t.chart.setAnnotations(t.anno);
            var sync=false;
            if(t.psiAvail){
                if(typeof t.pchart == "undefined"){
                    document.querySelectorAll(".pressure-group").forEach(function(ele){
                        ele.classList.remove("forced-hidden");
                    });

                    t.createPSIChart();
                    sync=true;  
                }
                else t.pchart.updateOptions({
                    'file': t.psi,
                    'dateWindow':[t.psi[0][0],t.psi[t.psi.length-1][0]]
                });
            }

            if(t.rhValid){
                if(typeof t.hchart == "undefined"){
                    document.querySelectorAll(".humidity-group").forEach(function(ele){
                        ele.classList.remove("forced-hidden");
                    });

                    t.createHumidityChart();
                    sync=true;  
                }
                else t.hchart.updateOptions({
                    'file': t.rh,
                    'dateWindow':[t.rh[0][0],t.rh[t.rh.length-1][0]]                    
                });
            }

            if(sync) t.synchronize();

        };
        BrewChart.prototype.processRecord = function() {
            var t = this;
            // fill blank/unchanged fileds by checking the change mask(t.chnages)
            while ((((1 << t.lidx) & t.changes) == 0) && t.lidx < t.numData) {
                // gravity data is independant, use "null" to connect the line. (NaN) to disconnect.
                t.dataset.push((t.lidx > RoomTemperatureIndex && t.lidx != PSIDataIndex) ? null : t.laststat[t.lidx]);
                t.lidx++;
            }
            if (t.lidx >= t.numData) {
               // already get all data in a period record
                // get all data
                var minuteRecord = t.dataset.slice(0, 8);
    
                // handle gravity
                //  1. calculated
                //  2. in period record
                //  3. in special record
                
                var sg = NaN;
                var gravityTilt = t.dataset[GravityLine];
                if(! t.calibrating){
                    if(gravityTilt != null) sg = gravityTilt;
                }else{ 
                    // calibrating
                    if (!t.calculateSG) {
                        // calibrating, but not having formula
                        // if "gravity" data is available and currently not "calculating"(first run or not calibrating)
                        //sg = t.specificGravity;
                        // it's tilt data */
                        minuteRecord[GravityLine] = null;
                    } else {
                        //if (t.calculateSG) 
                        // must be in calibrating mode
                        // data field #8 is tilt in source data
                        if (minuteRecord[GravityLine] != null){
                            var temp = (this.celius) ? C2F(t.dataset[AuxTempLine]) : t.dataset[AuxTempLine];
                            sg = t.sgByTilt(t.dataset[GravityLine]);

                            if (t.plato) {
                                sg = BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(sg), temp, C2F(t.coTemp)));
                            }
                            minuteRecord[GravityLine] = sg;
                        }
                    }
                }
                if (!isNaN(sg)) {
                    t.sg = sg;
                    t.filterSg = GravityFilter.add(sg);
                    if (t.plato)
                        GravityTracker.add(Math.round(t.filterSg * 10), t.ctime);
                    else
                        GravityTracker.add(Math.round(t.filterSg * 1000), t.ctime);
                }

                if (!isNaN(t.sg)) minuteRecord.push(t.filterSg);
                else minuteRecord.push(null);

                if(! isNaN(t.dataset[PSIDataIndex]) && t.dataset[PSIDataIndex]!=null) t.psiAvail = true;

                var vol =null;
                if(! isNaN(t.dataset[PSIDataIndex]) && t.dataset[PSIDataIndex]!=null){
                    if(!isNaN(t.dataset[BeerTempLine])){
                        var T = (t.celius)? C2F(t.dataset[BeerTempLine]):t.dataset[BeerTempLine];
                        vol = (t.dataset[PSIDataIndex] + 14.695) * (0.01821 + 0.090115 * Math.exp( (32 - T)/43.11 )) - 0.003342;
                        vol = Math.round(vol * 10)/10.0;
                    }
                }
                t.psi.push( [t.dataset[0], t.dataset[PSIDataIndex],t.targetPsi,vol]);
                
                t.data.push(minuteRecord);
                t.state.push(t.cstate);
                var ret=false;
                if(t.calibrating){
                    t.angles.push(gravityTilt);
                    t.rawSG.push(t.specificGravity);
                    if(t.specificGravity != null) ret =true;
                    t.specificGravity = null;
                }
                // humidity
                t.rh.push([t.dataset[0],
                        (t.lastRh <=100)? t.lastRh:NaN,
                        (t.lastSetRh<=100)? t.lastSetRh:NaN,
                        (t.lastRoomRh <=100)? t.lastRoomRh:NaN]);
                

                t.incTime(); // add one time interval
                return ret;
            }
        };


        BrewChart.prototype.setHChart = function(id,label) {
            this.hcid=id;
            this.hlabel=label;
        };
        BrewChart.prototype.createHumidityChart = function() {
            var t=this;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            document.body.appendChild(ldiv);

            t.hchart = new Dygraph(document.getElementById(t.hcid), t.rh, {
                labels: ["Time","rh","set","Room"],
                colors: BrewChart.Colors.slice(ChamberHumidityLine-1,RoomHumidityLine),
                connectSeparatedPoints: true,
                ylabel: t.hlabel,
                y2label: "%",
                axisLabelFontSize: 12,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                //displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                }
            });
            t.hchart.setVisibility(0,true);
        };
        /* end of chart.js */
</script>
    <script>
        /* Regression.JS */
        /* the librar is embedded for your convenience .*/
        /**
         * @license
         *
         * Regression.JS - Regression functions for javascript
         * http://tom-alexander.github.com/regression-js/
         *
         * copyright(c) 2013 Tom Alexander
         * Licensed under the MIT license.
         *
         * @module regression - Least-squares regression functions for JavaScript
         **/
        ! function(a, b) {
            var c;
            return c = "function" == typeof define && define.amd ? define("regression", b) : "undefined" != typeof module ? module.exports = b() : a.regression = b()
        }(this, function() {
            "use strict";

            function a(a, b) {
                var c = a.reduce(function(a, b) {
                        return a + b[1]
                    }, 0),
                    d = c / a.length,
                    e = a.reduce(function(a, b) {
                        var c = b[1] - d;
                        return a + c * c
                    }, 0),
                    f = a.reduce(function(a, c, d) {
                        var e = b[d],
                            f = c[1] - e[1];
                        return a + f * f
                    }, 0);
                return 1 - f / e
            }

            function b(a, b) {
                var c = 0,
                    d = 0,
                    e = 0,
                    f = 0,
                    g = 0,
                    h = a.length - 1,
                    i = new Array(b);
                for (c = 0; h > c; c++) {
                    for (f = c, d = c + 1; h > d; d++) Math.abs(a[c][d]) > Math.abs(a[c][f]) && (f = d);
                    for (e = c; h + 1 > e; e++) g = a[e][c], a[e][c] = a[e][f], a[e][f] = g;
                    for (d = c + 1; h > d; d++)
                        for (e = h; e >= c; e--) a[e][d] -= a[e][c] * a[c][d] / a[c][c]
                }
                for (d = h - 1; d >= 0; d--) {
                    for (g = 0, e = d + 1; h > e; e++) g += a[e][d] * i[e];
                    i[d] = (a[h][d] - g) / a[d][d]
                }
                return i
            }

            function c(a, b) {
                var c = Math.pow(10, b);
                return Math.round(a * c) / c
            }
            var d, e = 2,
                f = {
                    linear: function(b, d, e) {
                        for (var f, g, h, i = [0, 0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += b[k][0], i[1] += b[k][1], i[2] += b[k][0] * b[k][0], i[3] += b[k][0] * b[k][1], i[4] += b[k][1] * b[k][1]);
                        return g = (j * i[3] - i[0] * i[1]) / (j * i[2] - i[0] * i[0]), h = i[1] / j - g * i[0] / j, f = b.map(function(a) {
                            var b = a[0];
                            return [b, g * b + h]
                        }), {
                            r2: a(b, f),
                            equation: [g, h],
                            points: f,
                            string: "y = " + c(g, e.precision) + "x + " + c(h, e.precision)
                        }
                    },
                    linearthroughorigin: function(b, d, e) {
                        for (var f, g, h = [0, 0], i = 0; i < b.length; i++) null !== b[i][1] && (h[0] += b[i][0] * b[i][0], h[1] += b[i][0] * b[i][1]);
                        return f = h[1] / h[0], g = b.map(function(a) {
                            var b = a[0];
                            return [b, f * b]
                        }), {
                            r2: a(b, g),
                            equation: [f],
                            points: g,
                            string: "y = " + c(f, e.precision) + "x"
                        }
                    },
                    exponential: function(b, d, e) {
                        for (var f, g, h, i, j = [0, 0, 0, 0, 0, 0], k = 0; k < b.length; k++) null !== b[k][1] && (j[0] += b[k][0], j[1] += b[k][1], j[2] += b[k][0] * b[k][0] * b[k][1], j[3] += b[k][1] * Math.log(b[k][1]), j[4] += b[k][0] * b[k][1] * Math.log(b[k][1]), j[5] += b[k][0] * b[k][1]);
                        return f = j[1] * j[2] - j[5] * j[5], g = Math.exp((j[2] * j[3] - j[5] * j[4]) / f), h = (j[1] * j[4] - j[5] * j[3]) / f, i = b.map(function(a) {
                            var b = a[0];
                            return [b, g * Math.exp(h * b)]
                        }), {
                            r2: a(b, i),
                            equation: [g, h],
                            points: i,
                            string: "y = " + c(g, e.precision) + "e^(" + c(h, e.precision) + "x)"
                        }
                    },
                    logarithmic: function(b, d, e) {
                        for (var f, g, h, i = [0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += Math.log(b[k][0]), i[1] += b[k][1] * Math.log(b[k][0]), i[2] += b[k][1], i[3] += Math.pow(Math.log(b[k][0]), 2));
                        return g = (j * i[1] - i[2] * i[0]) / (j * i[3] - i[0] * i[0]), f = (i[2] - g * i[0]) / j, h = b.map(function(a) {
                            var b = a[0];
                            return [b, f + g * Math.log(b)]
                        }), {
                            r2: a(b, h),
                            equation: [f, g],
                            points: h,
                            string: "y = " + c(f, e.precision) + " + " + c(g, e.precision) + " ln(x)"
                        }
                    },
                    power: function(b, d, e) {
                        for (var f, g, h, i = [0, 0, 0, 0], j = b.length, k = 0; j > k; k++) null !== b[k][1] && (i[0] += Math.log(b[k][0]), i[1] += Math.log(b[k][1]) * Math.log(b[k][0]), i[2] += Math.log(b[k][1]), i[3] += Math.pow(Math.log(b[k][0]), 2));
                        return g = (j * i[1] - i[2] * i[0]) / (j * i[3] - i[0] * i[0]), f = Math.exp((i[2] - g * i[0]) / j), h = b.map(function(a) {
                            var b = a[0];
                            return [b, f * Math.pow(b, g)]
                        }), {
                            r2: a(b, h),
                            equation: [f, g],
                            points: h,
                            string: "y = " + c(f, e.precision) + "x^" + c(g, e.precision)
                        }
                    },
                    polynomial: function(d, e, f) {
                        var g, h, i, j, k, l, m, n, o = [],
                            p = [],
                            q = 0,
                            r = 0,
                            s = d.length;
                        for (h = "undefined" == typeof e ? 3 : e + 1, i = 0; h > i; i++) {
                            for (k = 0; s > k; k++) null !== d[k][1] && (q += Math.pow(d[k][0], i) * d[k][1]);
                            for (o.push(q), q = 0, g = [], j = 0; h > j; j++) {
                                for (k = 0; s > k; k++) null !== d[k][1] && (r += Math.pow(d[k][0], i + j));
                                g.push(r), r = 0
                            }
                            p.push(g)
                        }
                        for (p.push(o), m = b(p, h), l = d.map(function(a) {
                                var b = a[0],
                                    c = m.reduce(function(a, c, d) {
                                        return a + c * Math.pow(b, d)
                                    }, 0);
                                return [b, c]
                            }), n = "y = ", i = m.length - 1; i >= 0; i--) n += i > 1 ? c(m[i], f.precision) + "x^" + i + " + " : 1 === i ? c(m[i], f.precision) + "x + " : c(m[i], f.precision);
                        return {
                            r2: a(d, l),
                            equation: m,
                            points: l,
                            string: n
                        }
                    },
                    lastvalue: function(b, d, e) {
                        for (var f = [], g = null, h = 0; h < b.length; h++) null !== b[h][1] && isFinite(b[h][1]) ? (g = b[h][1], f.push([b[h][0], b[h][1]])) : f.push([b[h][0], g]);
                        return {
                            r2: a(b, f),
                            equation: [g],
                            points: f,
                            string: "" + c(g, e.precision)
                        }
                    }
                };
            return d = function(a, b, c, d) {
                var g = "object" == typeof c && "undefined" == typeof d ? c : d || {};
                return g.precision || (g.precision = e), "string" == typeof a ? f[a.toLowerCase()](b, c, g) : null
            }
        });
        /*** end of Regression.JS **/
</script>
    <script>
    /* ispindel calibration */
    var PolyRegression = {
        allpoints: [],
        clear: function() {
            var tbody = document.getElementById("pointlist").getElementsByTagName("tbody")[0];
            var rl = tbody.querySelectorAll("tr.pl_calpoint");
            var count = rl.length;
            for (var i = rl.length - 1; i >= 0; i--) {
                var tr = rl[i];
                tr.parentNode.removeChild(tr);
            }
            return tbody;
        },
        newrow: function(values) {
            var tr = this.row.cloneNode(true);

            var td2 = tr.querySelector("td.pl_tilt");
            td2.innerHTML = values[0].toFixed(2);

            var td4 = tr.querySelector("td.pl_sg");
            td4.innerHTML = this.plato ? values[1].toFixed(2) : values[1].toFixed(4); // BrewMath.brix2sg(this.points[i][1]).toFixed(3);

            var td6i = tr.querySelector("td.pl_value");
            td6i.innerHTML = this.plato ? values[2].toFixed(2) : values[2].toFixed(4);

            var td6 = tr.querySelector("td.pl_error");
            td6.innerHTML = this.plato ? values[3].toFixed(2) : (values[3] * 1000).toFixed(1);

            var ig_input = tr.querySelector("input.pl_ignored_cb");
            ig_input.checked = values[4];
            var t = this;
            ig_input.onchange = function() { t.igchanged(this); };
            return tr;
        },
        igchanged: function(checkbox) {
            var tbody = document.getElementById("pointlist").getElementsByTagName("tbody")[0];
            var ilist = tbody.querySelectorAll("input.pl_ignored_cb");
            var mask = 0;
            var notignored = 0;
            for (var i = 0; i < ilist.length; i++) {
                if (ilist[i].checked) mask = mask | (0x1 << i);
                else notignored++;
            }
            if (notignored < 2) {
                console.log("less than 2.");
                checkbox.checked = false;
            } else {
                this.cal_igmask = mask;
                this.show();
            }
        },
        show: function() {
            if (!this.row) {
                this.row = Q("#pointlist tr.pl_calpoint");
                this.row.parentNode.removeChild(this.row);
            }
            this.getFormula();
            var tbody = this.clear();
            for (var i = 0; i < this.ptlist.length; i++) {
                tbody.appendChild(this.newrow(this.ptlist[i]));
            }
            this.chart();
        },
        getFormula: function() {
            var t = this;
            if (t.allpoints.length < 2) return;
            t.points = [];
            for (var i = 0; i < t.allpoints.length; i++) {
                if (!((0x1 << i) & t.cal_igmask)) t.points.push(t.allpoints[i]);
            }
            if (t.points.length < 2) {
                // ignore too much. ignore the ignore
                t.points = t.alpoints;
                t.cal_igmask = 0;
            }

            var poly = regression('polynomial', t.points, (t.points.length > 3) ? 3 : ((t.points.length > 2) ? 2 : 1), {
                precision: 9
            });
            t.regression = poly;
            Q("#polynormial").innerHTML = poly.string;
            // caluate errors

            t.sgByTilt = (t.points.length > 3) ?
                function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x +
                        poly.equation[3] * x * x * x;
                } : ((t.points.length > 2) ? function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x;
                } : function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x;
                });

            var point_list = [];

            for (var i = 0; i < t.allpoints.length; i++) {
                var tilt = t.allpoints[i][0];
                var realsg = t.allpoints[i][1];
                var cal_sg = t.sgByTilt(tilt);
                var error = realsg - cal_sg;
                var ignored = ((0x1 << i) & t.cal_igmask) != 0;
                point_list.push([tilt, realsg, cal_sg, error, ignored]);
            }
            t.ptlist = point_list;
        },
        chart: function() {
            var data = [];
            for (var i = 0; i < this.allpoints.length; i++) {
                data.push([this.ptlist[i][0], this.ptlist[i][1], this.ptlist[i][2]]);
            }
            if (typeof this.graph == "undefined") {
                this.graph = new Dygraph(
                    document.getElementById("graph"), data, {
                        labels: ["Tilt", "SG", "Interpolated"],
                        colors: ["rgb(240, 100, 100)", "rgb(89, 184, 255)"],
                        series: {
                            'SG': {
                                drawPoints: true,
                                pointSize: 4,
                                strokeWidth: 0
                            }
                        },
                        axisLabelFontSize: 12,
                        gridLineColor: '#ccc',
                        gridLineWidth: '0.1px',
                        strokeWidth: 1,
                        xRangePad: 10,
                        axes: {
                            y: {
                                axisLabelWidth: 40,
                                axisLabelFormatter: function(y) {
                                    return y.toFixed(3);
                                },
                                valueFormatter: function(y) {
                                    return y.toFixed(3);
                                }
                            },
                            x: {
                                pixelsPerLabel: 30,
                                axisLabelWidth: 40
                            }
                        }
                    }
                );
            } else {
                this.graph.updateOptions({
                    'file': data
                });
                this.graph.resize();
            }
        }
    };

    function applyIgnoreMask() {
        BChart.setIgnoredMask(PolyRegression.cal_igmask);
    }

    function openpolynomialpane() {
        Q("#polynomialpane").style.display = "block";
        PolyRegression.allpoints = BChart.chart.calibrationPoints;
        PolyRegression.cal_igmask = BChart.chart.cal_igmask;
        PolyRegression.plato = BChart.chart.plato;
        PolyRegression.show();
    }

    function closepolynomialpane() {
        Q("#polynomialpane").style.display = "none";
    }
    /* end of calibration */
</script>
    <script>
var JSVERSION = "4.2";

function s_ajax(b) {
    var c = new XMLHttpRequest();
    c.onreadystatechange = function() {
        if (c.readyState == 4) {
            if (c.status == 200) {
                b.success(c.responseText)
            } else {
                c.onerror(c.status)
            }
        }
    };
    c.ontimeout = function() {
        if (typeof b["timeout"] != "undefined") b.timeout();
        else c.onerror(-1)
    }, c.onerror = function(a) {
        if (typeof b["fail"] != "undefined") b.fail(a)
    };
    c.open(b.m, b.url, true);
    if (typeof b["data"] != "undefined") {
        c.setRequestHeader("Content-Type", (typeof b["mime"] != "undefined") ? b["mime"] : "application/x-www-form-urlencoded");
        c.send(b.data)
    } else c.send()
}

var Q = function(d) {
    return document.querySelector(d);
};

function doAll(c,act){
    document.querySelectorAll(c).forEach(function(i){act(i)});
}

function C2F(c) {
    return Math.round((c * 1.8 + 32) * 10) / 10
}

function F2C(f) {
    return Math.round((f - 32) / 1.8 * 10) / 10
}

function openDlgLoading() {
    document.getElementById('dlg_loading').style.display = "block";
}

function closeDlgLoading() {
    document.getElementById('dlg_loading').style.display = "none";
}

var BrewMath = {
    abv: function(og, fg) {
        return ((76.08 * (og - fg) / (1.775 - og)) * (fg / 0.794)).toFixed(1);
    },
    abvP: function(og, fg) {
        return BrewMath.abv(BrewMath.pla2sg(og), BrewMath.pla2sg(fg));
    },
    att: function(og, fg) {
        return Math.round((og - fg) / (og - 1) * 100);
    },
    attP: function(pog, pfg) {
        return Math.round((pog - pfg) / pog * 100);
    },
    sg2pla: function(sg) {
        return (((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622);
    },
    pla2sg: function(pla) {
        return 1 + (pla / (258.6 - ((pla / 258.2) * 227.1)));
    },
    tempCorrectionF(sg, t, c) {
        var nsg = sg * ((1.00130346 - 0.000134722124 * t + 0.00000204052596 * t * t - 0.00000000232820948 * t * t * t) /
            (1.00130346 - 0.000134722124 * c + 0.00000204052596 * c * c - 0.00000000232820948 * c * c * c));
        return nsg;
    },
    pTempCorrectionF(sg, t, c) {
        return BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(sg), t, c));
    },
    tempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.tempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    },
    pTempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.pTempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    }
};

Date.prototype.shortLocalizedString = function() {
    var y = this.getYear() + 1900;
    var re = new RegExp('[^\d]?' + y + '[^\d]?');
    var n = this.toLocaleDateString();
    var ds = n.replace(re, "");
    var HH = this.getHours();
    var MM = this.getMinutes();

    function T(x) {
        return (x > 9) ? x : ("0" + x);
    }
    return ds + " " + T(HH) + ":" + T(MM);
};

function getActiveNavItem() {
    var path = window.location.pathname.split("/").pop();
    if (path == "") path = "index.htm";
    var element = Q('.options>li>a[href="/' + path + '"]');
    if(element) element.className += 'active';
}

function formatDate(dt) {
    //	var y = dt.getFullYear();
    //	var M = dt.getMonth() +1;
    //	var d = dt.getDate();
    var h = dt.getHours();
    var m = dt.getMinutes();
    //    var s = dt.getSeconds();
    function dd(n) {
        return (n < 10) ? '0' + n : n;
    }
    //	return dd(M) + "/" + dd(d) + "/" + y +" "+ dd(h) +":"+dd(m)+":"+dd(s);
    //	return dd(M) + "/" + dd(d) +" "+ dd(h) +":"+dd(m);
    return dt.toLocaleDateString() + " " + dd(h) + ":" + dd(m);
}

function formatDateForPicker(date) {
    var h = date.getHours();
    var m = date.getMinutes();

    function dd(n) { return (n < 10) ? '0' + n : n; }
    return date.getFullYear() + "-" + dd(date.getMonth() + 1) + "-" + dd(date.getDate()) + "T" + dd(h) + ":" + dd(m);
}
</script>
    <script>
function TabPane(modes) {
    var t = this;
    t.cmode = null;

    function dselect(m) {
        var d = document.getElementById(m + "-m");
        //        var nc = document.getElementById(m + "-m").className.replace(/\snav-selected/, '');
        var nc = d.className.replace(/\snav-selected/, '');
        d.className = nc;

        document.getElementById(m + "-s").style.display = "none";
    }

    function select(m) {
        var d = document.getElementById(m + "-m");
        if (d.className.indexOf("nav-selected") < 0)
            d.className += ' nav-selected';

        document.getElementById(m + "-s").style.display = "block";
        t.cmode = m;
    }

    for (var i = 0; i < modes.length; i++) {
        var m = modes[i];
        document.getElementById(m + "-s").style.display = "none";
        document.getElementById(m + "-m").onclick = function() {
            var tm = this.id.replace(/-m$/, '');
            //deselect current selected 
            dselect(t.cmode);
            // select current
            select(tm);
            return false;
        };
    }
    // select the first one
    select(modes[0]);
    t.select = select;
}

var Capper = {
    target_psi: 0,
    psi_valid: false,
    hidepset: function(hide) {
        this.psi_valid = !hide;
        Q(".psi-set-group").style.display = hide ? "none" : "block";        
    },
    setpsi: function(psi) {
        this.target_psi = psi;
        Q("#cappressure").value = psi;        
    },
    init: function() {
        var t = this;
        // three conditions:
        //  classic, info-pane within capper-frame
        //  Tom's : info-pane only in index.htm
        //  Tom's UI: capper-frame(control) in control.htm

        var cp = Q(".capping-info-pane");
        if (cp) {
            // classic or Tom's index.htm, do no harm in classic
            cp.style.display = "none";
        }

        var cf = Q("#capper-frame");
        if (cf) {
            // classic or Tom's control.htm
            cf.style.display = "none";
            t.initCtrl();
        }
    },
    initCtrl: function() {
        var t = this;
        t.tabs = new TabPane(["tab-gravity", "tab-time", "tab-manual"]);
        var date_in = Q("#captimeinput");
        t.time = new Date();
        date_in.onchange = function() {
            var nd = new Date(date_in.value);
            if (isNaN(nd.getTime())) {
                // console.log("invalid date");
                t.setInputTime(t.time);
            } else {
                t.setInputTime(nd);
            }
        };
        Q("#cap-apply").onclick = function() {
            // get psi when needed
            var psiarg = t.psi_valid ? "psi=" + t.target_psi + "&" : "";

            var mode = t.tabs.cmode;
            if (mode == "tab-gravity") {
                var sg = Q("#capgravityinput").value;
                /*if (isNaN(sg) || sg > 2 || sg < 0.8) alert("Neplatn√° hustota");
                else*/
                t.send(psiarg + "sg=" + sg);
            } else if (mode == "tab-time") {
                var time = new Date(Q("#captimeinput").value);
                if (isNaN(time.getTime())) {
                    alert("Neplatn√Ω ƒças");
                    return;
                } else t.send(psiarg + "at=" + (time.getTime() / 1000));
            } else {
                if (Q("#capswitch").checked) t.send(psiarg + "cap=1");
                else t.send(psiarg + "cap=0");
            }
        };
        t.hidepset(true);
        Q("#cappressure").onchange = function() {
                t.target_psi=this.value;
        };
    },
    send: function(arg) {
        console.log("send " + arg);
        s_ajax({
            url: "cap?" + arg,
            m: "GET",
            success: function(b) {
                alert("Hotovo!");
            },
            fail: function(a) {
                alert("ne√∫spe≈°n√© nastavenie uz√°veru");
            }
        })

    },
    setcap: function(capped) {
        if (!Q("#capstate-open")) return;
        if (capped) {
            Q("#capstate-open").style.display = "none";
            Q("#capstate-close").style.display = "inline-block";
        } else {
            Q("#capstate-open").style.display = "inline-block";
            Q("#capstate-close").style.display = "none";
        }
    },
    setInputTime: function(d) {
        this.time = d;
        var date_in = Q("#captimeinput");
        date_in.value = (date_in.type == "datetime-local") ? formatDateForPicker(d) : formatDate(d);
    },
    status: function(capst) {
        // first set cap
        //0: none, 1: open, 2: close, 3:time, 4: gravity
        //  might need to hide the DOM, but a reload will solve this. just save some code
        if (typeof capst["m"] == "undefined" || capst.m == 0) return;

        this.statusInfo(capst);
        this.updateCtrl(capst);
    },
    statusInfo: function(capst) {
        // cap status
        var cp = Q(".capping-info-pane");
        if (cp) {
            cp.style.display = "block";

            this.setcap(capst["c"]);
            // info: cap condition
            var IDs = ["", "cs-manopen", "cs-mancap", "cs-timecon", "cs-sgcon"];
            for (var i = 1; i < IDs.length; i++) {
                if (i == capst.m) Q("#" + IDs[i]).style.display = "inline-block";
                else Q("#" + IDs[i]).style.display = "none";
            }

            if (typeof capst["g"] != "undefined")
                Q("#capgravityset").innerHTML = capst["g"];

            if (typeof capst["t"] != "undefined")
                Q("#captimeset").innerHTML = formatDate(new Date(capst["t"] * 1000));
        }
    },
    updateCtrl: function(capst) {
        // cap control
        var cf = Q("#capper-frame");
        if (cf) {
            cf.style.display = "block";

            if (typeof capst["g"] != "undefined")
                Q("#capgravityinput").value = capst["g"];

            if (typeof capst["t"] != "undefined")
                this.setInputTime(new Date(capst["t"] * 1000));
            else
                this.setInputTime(new Date());

            // check mode
            if (capst.m == 1) Q("#capswitch").checked = false;
            else if (capst.m == 2) Q("#capswitch").checked = true;
            // pressure control mode
            if (capst.pm == 2) {
                this.hidepset(false);
                this.setpsi(capst.psi);
            }
        }
    },
    tunit:'C',
    calpsi:function(){
        if(typeof BrewPiSetting !="undefined")
            this.tunit=BrewPiSetting.tempUnit;

        Q("#dlg_carbonation").style.display="block";
    },
    calCancel:function(){
        Q("#dlg_carbonation").style.display="none";
    },
    calOk:function(){
        var p=Q("#carcal-psi").innerHTML;
        if(!isNaN(p)) this.setpsi(p);
        Q("#dlg_carbonation").style.display="none";
    },
    cal:function(){
        var V=Q("#carcal-vol").value;
        var T = Q("#carcal-temp").value;
        if(this.tunit == 'C') T = C2F(T);
        var P = -16.6999 - 0.0101059 * T + 0.00116512 * T * T + 0.173354 * T * V + 4.24267 *V - 0.0684226 *V * V;
        Q("#carcal-psi").innerHTML=Math.round(P);
    }
};
</script>
    <script>
    var T_CHART_REQUEST = 12000;
    var T_CHART_RETRYTO = 6000;
    var T_CHART_ZERODATA = 10000;
    var T_CHART_REFRESH = 2500;
    var T_CHART_RETRY = 10000;
    var T_LOAD_CHART = 150;
    var T_BWF_RECONNECT = 10000;
    var T_BWF_LCD = 10000;
    var BChart = {
        offset: 0,
        url: 'chart.php',
        calibrating:function(){
            if(typeof this.chart =="undefined") return false;
            return this.chart.calibrating;
        },
        toggle: function(line) {
            this.chart.toggleLine(line);
        },
        updateFormula: function() {
            var coeff = this.chart.coefficients;
            var npt = (this.chart.npt << 24) | (this.chart.cal_igmask & 0xFFFFFF);
            var changed = true;
            if (typeof window.npt != "undefined" && window.npt == npt) {
                changed = false;
            }
            if (!changed) return;
            var url = "coeff?" + "a0=" + coeff[0].toFixed(9) +
                "&a1=" + coeff[1].toFixed(9) + "&a2=" + coeff[2].toFixed(9) +
                "&a3=" + coeff[3].toFixed(9) + "&pt=" + npt;
            s_ajax({
                url: url,
                m: "GET",
                success: function(d) { window.npt = npt; },
                fail: function(d) {
                    alert("Formul√°r sa nepodarilo aktualizova≈•." + d);
                }
            });
        },
        reprocesData: function() {
            // recalcualte data
            // re process data to get correct calibration points
            var t = this;
            for (var i = 0; i < t.bdata.length; i++)
                t.chart.process(t.bdata[i]);
        },
        updateChartResult: function() {
            var t = this;
            if (t.chart.sg && !isNaN(t.chart.sg)) {
                updateGravity(t.chart.sg);
                t.chart.sg = NaN;
                checkfgstate();
            }
            t.chart.updateChart();
        },
        setIgnoredMask: function(m) {
            var t = this;
            if (t.chart.cal_igmask == m) return;

            t.chart.calculateSG = false;
            t.reprocesData();
            // the data will be updated by the "data"
            t.chart.cal_igmask = m;
            t.chart.getFormula();

            t.reprocesData();

            t.updateChartResult();
            // the data will be updated by the "data",again
            t.chart.cal_igmask = m;
            t.updateFormula();
        },
        reqdata: function() {
            var t = this;
            var PD = 'offset=' + t.offset;

            if (typeof t.startOff != "undefined" && t.startOff !== null)
                PD = PD + "&index=" + t.startOff;
            var xhr = new XMLHttpRequest();
            xhr.open('GET', t.url + '?' + PD);
            //	xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            //	xhr.setRequestHeader("Content-length", PD.length);
            xhr.timeout = T_CHART_REQUEST;
            xhr.responseType = 'arraybuffer';
            xhr.onload = function(e) {
                if (this.status == 404) {
                    console.log(" Error getting log data");
                    return;
                }
                // response is unsigned 8 bit integer
                var data = new Uint8Array(this.response);
                // backup data 
                if (t.offset) t.bdata.push(data);
                else t.bdata = [data];

                if (data.length == 0) {
                    //console.log("zero content");
                    if (t.timer) clearInterval(t.timer);
                    t.timer = null;
                    setTimeout(function() {
                        t.reqdata();
                    }, T_CHART_ZERODATA);
                    return;
                }
                var res = t.chart.process(data);
                if (res.nc) {
                    t.offset = data.length;
                    t.startOff = xhr.getResponseHeader("LogOffset");
                    //t.getLogName();
                    //console.log("new chart, offset="+t.startOff);
                    if (t.chart.calibrating) {
                        t.chart.getFormula();
                        //  do it again
                        t.chart.process(data);
                        if (t.chart.calculateSG) {
                            Q("#formula-btn").style.display = "block";
                            // update formula
                            t.updateFormula();
                        }
                    }
                } else {
                    t.offset += data.length;
                    if (t.chart.calibrating && res.sg) {
                        // new calibration data available. 
                        //force to reload and re-process the data
                        console.log("New SG availbe. reprocess");
                        t.chart.calculateSG = false;
                        t.reprocesData();
                        // the data will be updated by the "data"
                        t.chart.getFormula(); // derive the formula
                        // this time, the gravity is calculated.
                        t.reprocesData();
                        t.updateChartResult();
                        t.updateFormula();
                        return;
                    }
                }

                t.chart.updateChart();

                if (!isNaN(t.chart.og)) {
                    updateOriginGravity(t.chart.og);
                    t.chart.og = NaN;
                }
                if (t.chart.sg && !isNaN(t.chart.sg)) {
                    updateGravity(t.chart.sg);
                    t.chart.sg = NaN;
                    checkfgstate();
                }
                if (t.timer == null) t.settimer();
            };
            xhr.ontimeout = function(e) {
                console.error("Timeout!" + (new Date()));
                if (t.timer == null) setTimeout(function() {
                    t.reqdata();
                }, T_CHART_RETRYTO);
            };
            xhr.onerror = function() {
                console.log("Error getting data");
                if (t.timer == null) setTimeout(function() {
                    t.reqdata();
                }, T_CHART_RETRY);
            };
            //console.log(PD);
            xhr.send();
        },
        settimer: function() {
            var t = this;
            //console.log("start timer at "+ t.chart.interval);
            t.timer = setInterval(function() {
                t.reqdata();
            }, t.chart.interval * 1000);
        },
        init: function(id, y1, y2,id2,pl,carbonation,id3,rhLabel) {
            this.chart = new BrewChart(id);
            this.chart.setLabels(y1, y2);
            if(typeof id2 != "undefined") this.chart.setPChart(id2,pl,carbonation)
            if(typeof id3 != "undefined") this.chart.setHChart(id3,rhLabel);
        },
    timer: null,
        start: function() {
            if (this.running) return;
            this.running = true;
            this.offset = 0;
            this.reqdata();
        },
        reqnow: function() {
                var t = this;
                if (t.timer) clearInterval(t.timer);
                t.timer = null;
                t.reqdata();
            }
            /*
            , 
            getLogName: function() {
                s_ajax({
                    url: "loglist.php",
                    m: "GET",
                    success: function(d) {
                        var r = JSON.parse(d);
                        if (r.rec) {
                            Q("#recording").innerHTML = r.log;
                        } else {
                            Q("#recording").innerHTML = "";
                        }
                    },
                    fail: function(d) {
                        console.log("get logname fail");
                    }
                });
            }*/
    };
    /* LCD information */
/*
    function parseStatusLine(line) {
        var status = {};
        var i = 0;
        var statePatterns = [
            /Idling\s+for\s+(\S+)\s*$/i,
            /control\s+OFF/i,
            /Door\s+Open/i,
            /Heating\s+for\s+(\S+)\s*$/i,
            /Cooling\s+for\s+(\S+)\s*$/i,
            /Wait\s+to\s+Cool\s+(\S+)\s*$/i,
            /Wait\s+to\s+Heat\s+(\S+)\s*$/i,
            /Waiting\s+for\s+Peak/i,
            /Cool\s+Time\s+left\s+(\S+)\s*$/i,
            /Heat\s+Time\s+left\s+(\S+)\s*$/i
        ];
        status.ControlStateSince = "";
        for (i = 0; i < statePatterns.length; i++) {
            var match = statePatterns[i].exec(line);
            if (match) {
                if (typeof match[1] !== "undefined") status.ControlStateSince = match[1];
                break;
            }
        }
        status.ControlState = i;
        status.StatusLine = line;
        return status;
    }
*/
function parseStateSince(line) {
    var match;
    if(match = /(\d+h\d\dm\d\d)/.exec(line)){
        return match[1];
    } else if (match = /(\d+m\d\d)/.exec(line)) {
        return match[1];
    }
    return "";    
}


    function renderLcdText(info) {
        var div = Q(".error");
        if (div) div.style.display = "none";

        function T(temp) {
            if (temp < -10000) return "--.-";
            return (temp / 100).toFixed(1) + "&deg;" + info.tu;
        }
        var status = {};
        status.ControlStateSince = parseStateSince(info.sl);
        status.StatusLine = info.sl;
        status.ControlState = info.st;
        status.ControlMode = info.md;
        status.unit = info.tu;
        status.BeerTemp = T(info.bt);
        status.BeerSet = T(info.bs);
        status.FridgeTemp = T(info.ft);
        status.FridgeSet = T(info.fs);
        status.RoomTemp = T(info.rt);

        var ModeString = {
            o: "Vypnut√Ω",
            b: "Pivn√° kon≈°tanta",
            f: "Kon≈°. chladniƒçky",
            p: "Pivn√Ω profil",
            i: "Invalid"
        };
        var StateText = [
            "Neƒçinn√Ω {time}",
            "Kontrolovanie teploty vypnut√©",
            "Dvere otvoren√©",
            "Ohrievanie {time}",
            "Chladenie {time}",
            "ƒåakanie na chladenie {time}",
            "ƒåakanie na Ohrievanie {time}",
            "ƒåakanie na vrchol",
            "Zvy≈°n√Ω ƒças chladenia {time}",
            "Zvy≈°n√Ω ƒças ohrevu {time}",
            "Neplatn√Ω stav"
        ];

        function genStateText(state, duration) {
            if (typeof duration == "undefined") return StateText[state];

            var match;
            var timestr = "";
            if (match = /(\d+)h(\d\d)m(\d\d)/.exec(duration)) {
                timestr = "{HH}h{MM}m{SS}".replace("{SS}", match[3]).replace("{MM}", match[2]).replace("{HH}", match[1]);
            } else if (match = /(\d+)m(\d\d)/.exec(duration)) {
                // short
                timestr = "{MM}m{SS}".replace("{SS}", match[2]).replace("{MM}", match[1]);
            }
            return StateText[state].replace("{time}", timestr);
        }

        Object.keys(status).map(function(key, i) {
            var div = Q("#lcd" + key);
            if (div) {
                if (key == "ControlMode") div.innerHTML = ModeString[status[key]];
                else if (key == "ControlState") div.innerHTML = genStateText(status[key], status.ControlStateSince);
                else div.innerHTML = status[key];
            }
        });
        // keep the info for other usage
        if (typeof status["unit"] != "undefined") window.tempUnit = status.unit;
        if (typeof status["BeerTemp"] != "undefined") {
            var tempRE = /([\d\.]+)/;
            var temp = tempRE.exec(status.BeerTemp);
            if (temp.length > 0) window.beerTemp = temp[0];
        }
    }

    var roomOfridge = false;

    function simLcd(info) {

        var ModeString = {
            o: "Off",
            b: "Beer Const.",
            f: "Fridge Const.",
            p: "Beer Profile",
            i: "Invalid"
        };

        function showTemp(tp) {
            // always takes 5 chars
            if (tp < -10000) return " --.-";
            var text = (tp / 100.0).toFixed(1);
            var spaces = "";
            var i = text.length;
            for (; i < 5; i++) spaces += " ";
            return spaces + text;
        }

        var lines = [];
        lines[0] = "Mode   " + ModeString[info.md];
        lines[1] = "Beer  " + showTemp(info.bt) + " " + showTemp(info.bs) + " &deg;" + info.tu;
        if (info.rt > -10000 && roomOfridge)
            lines[2] = "Room  " + showTemp(info.rt) + " " + showTemp(-20000) + " &deg;" + info.tu;
        else
            lines[2] = "Fridge" + showTemp(info.ft) + " " + showTemp(info.fs) + " &deg;" + info.tu;
        roomOfridge = !roomOfridge;
        lines[3] = info.sl;
        return lines;
    }

    function displayLcdText(lines) {
        for (var i = 0; i < 4; i++) {
            var d = document.getElementById("lcd-line-" + i);
            if (d) d.innerHTML = lines[i];
        }
    }

    function displayLcd(info) {
        // classic interface
        window.tempUnit = info.tu;
        displayLcdText(simLcd(info));
        // new interface
        renderLcdText(info);
    }

    function hideErrorMsgs() {
        var msgs = document.querySelectorAll(".errormsg");
        for (var i = 0; i < msgs.length; i++)
            msgs[i].style.display = "none";
    }

    function communicationError() {
        var div = Q('.error');
        if (div) {
            hideErrorMsgs();
            Q('#error_connect').style.display = "block";
            div.style.display = "block";
        } else displayLcdText(["Failed to", "connect to", "Server", ""]);
    }

    function controllerError() {
        var div = Q('.error');
        if (div) {
            hideErrorMsgs();
            Q('#error_noupdate').style.display = "block";
            div.style.display = "block";
        } else displayLcdText(["Controller not", "updating data", "...", ""]);
    }

    function checkTime(time, tzoff) {
        var d = new Date();
        var tmoff = 0 - d.getTimezoneOffset() * 60;
        var tm = Math.round(d.getTime() / 1000);
        if (tzoff != tmoff || Math.abs(tm - time) > 1800) {
            // update time & timezone
            s_ajax({
                url: "time",
                m: "POST",
                mime: "application/x-www-form-urlencoded",
                data: "time=" + tm + "&off=" + tmoff,
                success: function() {}
            });

        }
    }

    function gravityDevice(msg) {

        if(typeof msg["dev"] != "undefined"){
            if(msg.dev ==1){ //ispindel
                Q(".gravity-device-pane").style.display="block";
                doAll(".ispindel-info",function(d){
                    //d.style.display="block";
                    d.classList.remove("no-display");
                });

                doAll(".tilt-info",function(d){
                    //d.style.display="none";
                    d.classList.add("no-display");

                });

            }else if(msg.dev ==2){
                Q(".gravity-device-pane").style.display="block";
                doAll(".ispindel-info",function(d){
                    //d.style.display="none";
                    d.classList.add("no-display");

                });
                doAll(".tilt-info",function(d){
                    //d.style.display="block";
                    d.classList.remove("no-display");

                });

            }else{
                Q(".gravity-device-pane").style.display="none";
            }
        }
        //if (typeof msg["name"] == "undefined") return;
        if (typeof msg["plato"] != "undefined") {
            window.plato = msg.plato;
            if (window.plato) showPlatoUnit();
        }
        if (typeof msg["fpt"] != "undefined") {
            window.npt = msg["fpt"];
        }

        // before iSpindel report to BPL, the name file is "unknown"
        if (typeof msg["name"] == "undefined") return
            //The first report will be "unknown" if (msg.name.startsWith("iSpindel")) {
            // iSpindel
        if (typeof msg["lu"] == "undefined") {
            console.log("iSpindel:" + JSON.stringify(msg));
            return;
        }
        if (msg.name.startsWith("iSpindel"))
            if (typeof window.iSpindel == "undefined") {
                window.iSpindel = true;
                if (Q("#iSpindel-pane"))
                    Q("#iSpindel-pane").style.display = "block";
            }
        var ndiv = Q("#iSpindel-name");
        if (ndiv) ndiv.innerHTML = msg.name;

        if (typeof msg["battery"] != "undefined" && Q("#iSpindel-battery")
            && msg.battery > 0)
            Q("#iSpindel-battery").innerHTML ="" + parseFloat(msg.battery).toFixed(2) +"V";

        if(msg.lu > 84879460){
          var lu = (typeof msg["lu"] != "undefined")? new Date(msg.lu * 1000):new Date();
            if (Q("#gravity-device-last"))
                Q("#gravity-device-last").innerHTML = lu.shortLocalizedString();
        }

        if (!BChart.chart.calibrating && typeof msg["sg"] != "undefined" &&
            msg.sg > 0)
            updateGravity(msg.sg);

        if (typeof msg["angle"] != "undefined") {
            if (Q("#iSpindel-tilt"))
                Q("#iSpindel-tilt").innerHTML = "" + msg["angle"];
        }
        if (typeof msg["rssi"] != "undefined"){
            if(Q("#gravity-device-rssi")){
                Q("#gravity-device-rssi").classList.remove("no-display");
                wifibar("#gravity-device-rssi",msg.rssi);
            }
        }
        //}
        if (typeof msg["lpf"] != "undefined")
            GravityFilter.setBeta(msg["lpf"]);

        if (typeof msg["stpt"] != "undefined")
            GravityTracker.setThreshold(msg["stpt"]);

        if (typeof msg["ctemp"] != "undefined")
            window.caltemp = msg["ctemp"];
    }


    function updateGravity(sg) {
        //if(typeof window.sg != "undefined") return;
        window.sg = sg;
        Q("#gravity-sg").innerHTML = window.plato ? sg.toFixed(1) : sg.toFixed(3);
        if (typeof window.og != "undefined") {
            Q("#gravity-att").innerHTML = window.plato ? BrewMath.attP(window.og, sg) : BrewMath.att(window.og, sg);
            Q("#gravity-abv").innerHTML = window.plato ? BrewMath.abvP(window.og, sg) : BrewMath.abv(window.og, sg);
        }
    }

    function updateOriginGravity(og) {
        if (typeof window.og != "undefined" && window.og == og) return;
        window.og = og;
        Q("#gravity-og").innerHTML = window.plato ? og.toFixed(1) : og.toFixed(3);
        if (typeof window.sg != "undefined")
            updateGravity(window.sg);
    }

    function showgravitydlg(msg) {
        Q('#dlg_addgravity .og').style.display = "none";
        Q('#dlg_addgravity .sg').style.display = "none";
        Q('#dlg_addgravity .' + msg).style.display = "block";
        Q('#dlg_addgravity').style.display = "block";
        // update temp.
        if (typeof window["tempUnit"] != "undefined") {
            window.celsius = false;
            var defaultTemp = 68;
            var re = /C$/;
            if (re.test(window.tempUnit)) {
                window.celsius = true;
                defaultTemp = 20;
            }
            Q("#dlg_addgravity .tempinput").value = defaultTemp;

            var tus = document.querySelectorAll("#dlg_addgravity .temp-unit");
            for (var i = 0; i < tus.length; i++)
                tus[i].innerHTML = window.tempUnit;
        } else window.celsius = true;
    }

    function dismissgravity() {
        Q('#dlg_addgravity').style.display = "none";
    }

    function inputsg_change() {
        var gravity = parseFloat(Q("#dlg_addgravity .sginput").value);
        var temp = parseFloat(Q("#dlg_addgravity .tempinput").value);
        if (isNaN(gravity) || isNaN(temp)) return;
        // if calibration info is avilable
        var caltemp = (typeof window.caltemp != "undefined") ? window.caltemp : 20;
        caltemp = window.celsius ? caltemp : C2F(caltemp);
        // calibration temperature always use celsius.
        Q("#sginput-hm-cal-temp").innerHTML = caltemp;
        if (window.plato) {
            var correctedSg = BrewMath.pTempCorrection(window.celsius, gravity, temp, caltemp);
            Q("#sginput-hmc").innerHTML = correctedSg.toFixed(2);

        } else {
            var correctedSg = BrewMath.tempCorrection(window.celsius, gravity, temp, caltemp);
            Q("#sginput-hmc").innerHTML = correctedSg.toFixed(3);
        }
        // if iSpindel info is available, or beer temp is available.
        if (typeof window.beerTemp != "undefined") {
            Q("#sginput-ispindel-temp").innerHTML = window.beerTemp;
            if (window.plato) {
                var sgc = BrewMath.pTempCorrection(window.celsius, gravity, temp, window.beerTemp);
                Q("#sginput-sg-ispindel").innerHTML = sgc.toFixed(2);
            } else {
                var sgc = BrewMath.tempCorrection(window.celsius, gravity, temp, window.beerTemp);
                Q("#sginput-sg-ispindel").innerHTML = sgc.toFixed(3);
            }
        }
    }

    function inputgravity() {
        var gravity = parseFloat(Q("#sginput-hmc").innerHTML);

        if (!window.plato && (gravity < 0.8 || gravity > 1.25)) return;

        dismissgravity();
        openDlgLoading();

        if (window.isog) updateOriginGravity(gravity);
        else updateGravity(gravity);

        var data = {
            name: "webjs",
            gravity: gravity
        };
        if (window.isog) data.og = 1;
        if (window.plato) data.plato = 1;
        s_ajax({
            url: "gravity",
            m: "POST",
            mime: "application/json",
            data: JSON.stringify(data),
            success: function(d) {
                closeDlgLoading();
                setTimeout(function() {
                    // request to 
                    if (BChart.chart.calibrating) BChart.reqnow();
                }, T_CHART_REFRESH);
            },
            fail: function(d) {
                alert("ne√∫spe≈°n√Ω:" + d);
                closeDlgLoading();
            }
        });

    }

    function inputSG() {
        window.isog = false;
        showgravitydlg("sg");
    }

    function inputOG() {
        window.isog = true;
        showgravitydlg("og");
    }

    function wifibar(did,x,ble){
        var strength =(typeof ble =="undefined")? [-1000, -90, -80, -70, -67]:[-1000,-80,-70,-60];
        var bar = 4;
        for (; bar >= 0; bar--) {
            if (strength[bar] < x) break;
        }
        var bars = Q(did).getElementsByClassName("rssi-bar");
        for (var i = 0; i < bars.length; i++) {
            bars[i].style.backgroundColor = (i < bar) ? window.rssiBarColor : "rgba(255,255,255,0.05)";
        }
        Q(did).title = (x > 0) ? "?" : Math.min(Math.max(2 * (x + 100), 0), 100);

    }

    function displayrssi(x) {
        Q("#rssi").title = (x > 0) ? "?" : Math.min(Math.max(2 * (x + 100), 0), 100);
        wifibar("#rssi",x);
        if (Q("#wifisignal"))
            Q("#wifisignal").innerHTML = (x > 0) ? "?" : Math.min(Math.max(2 * (x + 100), 0), 100);
    }

    function initRssi() {
        var rssi = Q("#rssi");
        window.rssiBarColor = window.getComputedStyle(Q('.rssi-bar1')).getPropertyValue('background-color');
        if (Q("#wifisignal")) {
            rssi.onmouseover = function() {
                Q("#wifisignal").style.display = "block";
            };
            rssi.onmouseout = function() {
                Q("#wifisignal").style.display = "none";
            };
        }
    }

    function ptcshow(msg) {
        if (typeof msg["ptc"] == "undefined" || typeof msg["pt"] == "undefined") return;
        var mode = msg.ptc;
        var time = msg.pt;

        function fortime(t) {
            var hour = Math.floor(t / 3600);
            var min = Math.floor((t - hour * 3600) / 60);
            var sec = t - hour * 3600 - min * 60;
            return ((hour) ? (hour + "H") : "") + ((hour + min) ? (min + "M") : "") + sec + "S";
        }
        var pane = Q("#ptc-pane");
        if (pane) {
            if (mode == "o") pane.style.display = "none";
            else {
                pane.style.display = "block";
            }
        } else return;
        var state = Q("#ptc-state");
        if (state) state.style.backgroundColor = (mode == "c") ? "lightgreen" : "gray";

        var textstateidle = Q("#ptc-state-idle");
        if (textstateidle) {
            var textstaterun = Q("#ptc-state-run");
            if (mode == "c") {
                textstateidle.style.display = "none";
                textstaterun.style.display = "block";
            } else {
                textstateidle.style.display = "block";
                textstaterun.style.display = "none";
            }
        }

        var tinfo = Q("#ptc-time");
        if (tinfo) tinfo.innerHTML = fortime(time);
        if (typeof msg["ptctp"] != "undefined") {
            var temp = Q("#ptc-temp");

            if (temp) temp.innerHTML = (msg.ptctp < -100) ? "NA" : ((msg.ptctp / 100) + "&deg;C");
        }
        if (typeof msg["ptclo"] != "undefined" && typeof msg["ptcup"] != "undefined") {
            var ts = Q("#ptc-set");
            if (ts) ts.innerHTML = (msg.ptclo / 100) + " ~ " + (msg.ptcup / 100) + "&deg;C";
        }
    }

    function showPlatoUnit() {
        var units = document.querySelectorAll(".platounit");
        for (var i = 0; i < units.length; i++) {
            units[i].style.display = "inline-block";
        }
    }
    
    function gravityInfo(info){
        // gravity, rssi, 
        if(Q("#gravity-device-rssi")) wifibar("#gravity-device-rssi",info.r);
        // last update
        if(info.u> 84879460){
            var lu = new Date(info.u * 1000);
            if (Q("#gravity-device-last")) Q("#gravity-device-last").innerHTML = lu.shortLocalizedString();
        }
        // gravity
        if(!BChart.calibrating && info.g > 0) updateGravity(window.plato? BrewMath.sg2pla(info.g/1000.0):info.g/1000.0);
        if(info.t > -20000) Q("#gravity-device-temp").innerHTML= info.t/100 + "&deg;" + window.tempUnit;
    }

    function BPLMsg(c) {
        BWF.gotMsg = true;

        if (typeof c["rssi"] != "undefined") {
            displayrssi(c["rssi"]);
        }
        if (typeof c["sl"] != "undefined") {
            displayLcd(c);
        }
        if (typeof c["reload"] != "undefined") {
            console.log("Forced reload chart");
            BChart.reqnow();
            if (!Q("#recording").innerHTML || Q("#recording").innerHTML != c.log)
                window.npt = 0; // delete formula to force update to BPL.                
        }
        if (typeof c["nn"] != "undefined") {
            Q("#hostname").innerHTML = c["nn"];
            document.title = c.nn; // + document.title.replace("BrewPiLess", "");
        }
        if (typeof c["ver"] != "undefined") {
            if (JSVERSION != c["ver"]) alert("Nespr√°vna verzia!. Znova naƒç√≠tajte str√°nku.");
            Q("#verinfo").innerHTML = "v" + c["ver"];
        }
        if (typeof c["tm"] != "undefined" && typeof c["off"] != "undefined") {
            checkTime(c.tm, c.off);
        }
        if (typeof c["log"] != "undefined") {
            Q("#recording").innerHTML = c.log;
        }
        if (typeof c["cap"] != "undefined")
            Capper.status(c["cap"]);
        if (typeof c["plato"] != "undefined") {
            window.plato = c["plato"];
            if (window.plato) showPlatoUnit();
        }

        if (typeof c["pm"] != "undefined" && typeof c["psi"] != "undefined") {
            if (c.pm != 0) {
                Q("#pressure-info-pane").style.display = "block";
                Q("#pressure-psi").innerHTML = c.psi;
            }
        }
        if(typeof c["G"] != "undefined") gravityInfo(c.G);

        ptcshow(c);
        if(typeof c["h"] != "undefined") {
            Q("#humidity-info").classList.remove("no-display");
            Q("#humidity").innerHTML= (c.h <=100)?  (c.h + "%"):"--";
        }
        if(typeof c["hr"] != "undefined") {
            Q("#room-humidity-info").classList.remove("no-display");
            Q("#room-humidity").innerHTML= (c.hr <=100)?  (c.hr + "%"):"--";
        }

    }

    function connBWF() {
        BWF.init({
            //            reconnect: false,
            onconnect: function() {
                BWF.send("c");
                if (window.lcdTimer) clearInterval(window.lcdTimer);
                window.lcdTimer = setInterval(function() {
                    if (!BWF.gotMsg) {
                        if (window.rcTimeout) {
                            // reconnect timer is running.
                            BWF.rcCount++;
                            console.log("rcTimeout failed.");
                            // let the reconnecting timer has more chances to do its job                         
                            if (BWF.rcCount < 3) return;
                            // restart reconect timer
                            clearTimer(window.rcTimeout);
                        }
                        // once connected.
                        //  no data for 5 seconds
                        controllerError();
                        window.rcTimeout = setTimeout(function() {
                            window.rcTimeout = null;
                            if (!BWF.gotMsg) BWF.reconnect(true);
                        }, T_BWF_RECONNECT);
                        BWF.rcCount = 0;
                        // setTimer might not be reliable. when the computer enter suspended state.
                        // keep this timer for saftey.
                        // clearInterval(window.lcdTimer);
                        //window.lcdTimer = null;
                        return;
                    }
                    //gotMsg==true, set flag and send
                    BWF.gotMsg = false;
                    //BWF.send("l");
                }, T_BWF_LCD);
            },
            error: function(e) {
                //console.log("error");
                // when connection establishment fails 
                // or connection broken
                communicationError();
                // do nothing, let BWF do the resconnection.
                //              setTimeout(function() {
                //                   if (!BWF.gotMsg) BWF.reconnect();
                //              }, 12000);
                closeDlgLoading();
            },
            handlers: {
                /*                L: function(lines) {
                                    BWF.gotMsg = true;
                                    processLcdText(lines);
                            },*/
                A: BPLMsg,
                G: function(c) {
                    gravityDevice(c);
                },
                // for control page. 
                C: function(c) { if (typeof ccparameter != "undefined") ccparameter(c); },
                B: function(c) { if (typeof rcvBeerProfile != "undefined") rcvBeerProfile(c); }
            }
        });
    }

    function init_classic() {
        window.plato = false;
        BChart.init("div_g", Q('#ylabel').innerHTML, Q('#y2label').innerHTML);
        initRssi();
        Capper.init();
        BWF.gotMsg = true;
        initctrl_C();
        connBWF();
        setTimeout(function() { BChart.start(); }, T_LOAD_CHART);
    }

    function init() {
        Q("#pressure-info-pane").style.display = "none";
        Q(".gravity-device-pane").style.display = "none";
        window.plato = false;
        BChart.init("div_g", Q('#ylabel').innerHTML, Q('#y2label').innerHTML,"div_p",Q('#psilabel').innerHTML,Q('#vollabel').innerHTML,"div_h",Q("#rhlabel").innerHTML);
        initRssi();
        Capper.init();
        BWF.gotMsg = true;
        connBWF();
        setTimeout(function() { BChart.start(); }, T_LOAD_CHART);
        getActiveNavItem();
    }
</script>


    <style>
/**
 * Default styles for the dygraphs charting library.
 */

.dygraph-legend {
  position: absolute;
  font-size: 14px;
  z-index: 10;
  width: 250px;  /* labelsDivWidth */
  /*
  dygraphs determines these based on the presence of chart labels.
  It might make more sense to create a wrapper div around the chart proper.
  top: 0px;
  right: 2px;
  */
  background: white;
  line-height: normal;
  text-align: left;
  overflow: hidden;
}

/* styles for a solid line in the legend */
.dygraph-legend-line {
  display: inline-block;
  position: relative;
  bottom: .5ex;
  padding-left: 1em;
  height: 1px;
  border-bottom-width: 2px;
  border-bottom-style: solid;
  /* border-bottom-color is set based on the series color */
}

/* styles for a dashed line in the legend, e.g. when strokePattern is set */
.dygraph-legend-dash {
  display: inline-block;
  position: relative;
  bottom: .5ex;
  height: 1px;
  border-bottom-width: 2px;
  border-bottom-style: solid;
  /* border-bottom-color is set based on the series color */
  /* margin-right is set based on the stroke pattern */
  /* padding-left is set based on the stroke pattern */
}

.dygraph-roller {
  position: absolute;
  z-index: 10;
}

/* This class is shared by all annotations, including those with icons */
.dygraph-annotation {
  position: absolute;
  z-index: 10;
  overflow: hidden;
}

/* This class only applies to annotations without icons */
/* Old class name: .dygraphDefaultAnnotation */
.dygraph-default-annotation {
  border: 1px solid black;
  background-color: white;
  text-align: center;
}

.dygraph-axis-label {
  /* position: absolute; */
  /* font-size: 14px; */
  z-index: 10;
  line-height: normal;
  overflow: hidden;
  color: black;  /* replaces old axisLabelColor option */
}

.dygraph-axis-label-x {
}

.dygraph-axis-label-y {
}

.dygraph-axis-label-y2 {
}

.dygraph-title {
  font-weight: bold;
  z-index: 10;
  text-align: center;
  /* font-size: based on titleHeight option */
}

.dygraph-xlabel {
  text-align: center;
  /* font-size: based on xLabelHeight option */
}

/* For y-axis label */
.dygraph-label-rotate-left {
  text-align: center;
  /* See http://caniuse.com/#feat=transforms2d */
  transform: rotate(90deg);
  -webkit-transform: rotate(90deg);
  -moz-transform: rotate(90deg);
  -o-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
}

/* For y2-axis label */
.dygraph-label-rotate-right {
  text-align: center;
  /* See http://caniuse.com/#feat=transforms2d */
  transform: rotate(-90deg);
  -webkit-transform: rotate(-90deg);
  -moz-transform: rotate(-90deg);
  -o-transform: rotate(-90deg);
  -ms-transform: rotate(-90deg);
}

</style>
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
    <style>
/** Colors **/
* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
}

/* https://github.com/Dogfalo/materialize/blob/master/sass/components/_typography.scss */
a {
  text-decoration: none;
}

html {
  line-height: 1.5;
  font-family: "Roboto", sans-serif;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.87);
}
@media only screen and (min-width: 0) {
  html {
    font-size: 14px;
  }
}
@media only screen and (min-width: 992px) {
  html {
    font-size: 14.5px;
  }
}
@media only screen and (min-width: 1200px) {
  html {
    font-size: 15px;
  }
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 400;
  line-height: 1.1;
}

h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
  font-weight: inherit;
}

h1 {
  font-size: 4.2rem;
  line-height: 110%;
  margin: 2.1rem 0 1.68rem 0;
}

h2 {
  font-size: 3.56rem;
  line-height: 110%;
  margin: 1.78rem 0 1.424rem 0;
}

h3 {
  font-size: 2.92rem;
  line-height: 110%;
  margin: 1.46rem 0 1.168rem 0;
}

h4 {
  font-size: 2.28rem;
  line-height: 110%;
  margin: 1.14rem 0 0.912rem 0;
}

h5 {
  font-size: 1.64rem;
  line-height: 110%;
  margin: 0.82rem 0 0.656rem 0;
}

h6 {
  font-size: 1rem;
  line-height: 110%;
  margin: 0.5rem 0 0.4rem 0;
}

em {
  font-style: italic;
}

strong {
  font-weight: 500;
}

small {
  font-size: 75%;
}

.light {
  font-weight: 300;
}

.thin {
  font-weight: 200;
}

/*
* ------------------------------------------------------------------------------------------------- DO NOT MODIFY THIS FILE!
* This CSS maps the layout attributes and the flex-item attributes to the style information.
*/
/*******************************
Flex Layout
*******************************/
html [layout], html [layout][horizontal], html [layout][vertical] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

html [layout][horizontal] {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
      flex-direction: row;
}

html [layout][vertical] {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
      flex-direction: column;
}

html [flex] {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  -ms-flex-preferred-size: 1e-9px;
      flex-basis: 1e-9px;
}

/* alignment in cross axis */
html [layout][cross-center], html [layout][center-center] {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

html [layout][cross-end] {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end;
}

/* alignment in main axis */
html [layout][main-center], html [layout][center-center] {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

html [layout][main-justified] {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

html [layout][main-distributed] {
  -ms-flex-pack: distribute;
      justify-content: space-around;
}

/*******************************
Other Layout
*******************************/
/* ie support for hidden */
html [hidden] {
  display: none !important;
}

html [relative] {
  position: relative;
}

/** Header **/
.header {
  height: 64px;
  background: #009688;
  -webkit-box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);
          box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);
  padding: 0 16px;
  z-index: 2;
}

.header_title {
  font-size: 32px;
  line-height: 64px;
  color: #FFF;
  margin: 0;
  padding: 0;
}

.header_version-display {
  font-size: 14px;
  color: #FFF;
}

[navigation] {
  /*
  * And let's fade it in from the left
  */
}
@media (max-width: 700px) {
  [navigation] [menuToggle] {
    display: block;
    position: relative;
    z-index: 1;
    top: 3px;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
  }
}
[navigation] input {
  display: none;
}
@media (max-width: 700px) {
  [navigation] input {
    display: block;
    width: 40px;
    height: 32px;
    position: absolute;
    top: -7px;
    left: -5px;
    cursor: pointer;
    opacity: 0;
    /* hide this */
    z-index: 2;
    /* and place it over the hamburger */
    -webkit-touch-callout: none;
  }
  [navigation] input:checked ~ ul {
    -webkit-transform: scale(1, 1);
            transform: scale(1, 1);
    opacity: 1;
  }
  [navigation] input:checked ~ span {
    opacity: 1;
    -webkit-transform: rotate(45deg) translate(-2px, -1px);
            transform: rotate(45deg) translate(-2px, -1px);
    background: #232323;
  }
  [navigation] input:checked ~ span:nth-last-child(3) {
    opacity: 0;
    -webkit-transform: rotate(0deg) scale(0.2, 0.2);
            transform: rotate(0deg) scale(0.2, 0.2);
  }
  [navigation] input:checked ~ span:nth-last-child(2) {
    opacity: 1;
    -webkit-transform: rotate(-45deg) translate(0, -1px);
            transform: rotate(-45deg) translate(0, -1px);
  }
}
[navigation] span {
  display: none;
}
@media (max-width: 700px) {
  [navigation] span {
    display: block;
    width: 33px;
    height: 4px;
    margin-bottom: 5px;
    position: relative;
    background: #FFF;
    border-radius: 3px;
    z-index: 1;
    -webkit-transform-origin: 4px 0px;
            transform-origin: 4px 0px;
    -webkit-transition: background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease;
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
  }
  [navigation] span:first-child {
    -webkit-transform-origin: 0% 0%;
            transform-origin: 0% 0%;
  }
  [navigation] span:nth-last-child(2) {
    -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
  }
}
[navigation] .options {
  list-style-type: none;
  height: 100%;
}
[navigation] .options > li {
  display: inline-block;
  height: 100%;
}
[navigation] .options a {
  color: #FFF;
  text-transform: uppercase;
  height: 100%;
  padding: 8px;
  display: inline-block;
  line-height: 48px;
  border-bottom: 3px solid transparent;
}
[navigation] .options a.active {
  border-bottom: 3px solid #FFC107;
}
[navigation] .options a:hover {
  border-bottom: 3px solid #FFF;
}
@media (max-width: 700px) {
  [navigation] .options {
    padding-top: 64px;
    position: fixed;
    display: block;
    width: 100vw;
    height: 100vh;
    right: 0;
    top: 0;
    background: #ededed;
    list-style-type: none;
    -webkit-font-smoothing: antialiased;
    /* to stop flickering of text in safari */
    -webkit-transform-origin: 0% 0%;
            transform-origin: 0% 0%;
    -webkit-transform: translate(100%, 0);
            transform: translate(100%, 0);
    -webkit-transition: -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
  }
  [navigation] .options > li {
    display: block;
    height: auto;
    text-align: center;
  }
  [navigation] .options a {
    color: #222;
    height: auto;
    width: 100%;
    display: block;
  }
  [navigation] .options a.active {
    color: #FFC107;
    border: none;
  }
  [navigation] .options a:hover {
    background: #CCC;
    border: none;
  }
}

/** Footer **/
.footer {
  height: 40px;
  background: #222;
  color: rgba(255, 255, 255, 0.87);
  padding: 0 16px;
}
.footer a {
  color: rgba(255, 255, 255, 0.87);
  font-weight: bold;
}

/** Content **/
[viewport] {
  min-height: calc(100% - 104px);
}
@media (max-width: 900px) {
  [viewport] {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
    min-height: 0;
  }
}

[main] {
  padding: 16px;
  overflow-y: auto;
}
@media (max-width: 900px) {
  [main] {
    overflow: initial;
  }
}
@media (max-width: 599px) {
  [main] > [layout] .chart-legend {
    width: 100%;
  }
}
@media (max-width: 599px) {
  [main] > [layout] {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
  }
}

/** Error **/
.error {
  position: fixed;
  left: 20px;
  bottom: 50px;
  background-color: #323232;
  padding: 12px 24px 17px 24px;
  vertical-align: middle;
  color: #fff;
  -webkit-box-shadow: 0 7px 18px rgba(0, 0, 0, 0.2);
          box-shadow: 0 7px 18px rgba(0, 0, 0, 0.2);
}
.error:empty {
  display: none;
}

/** Inputs **/
input[type=number],
input[type=text],
input[type=password],
input[type=datetime-local] {
  width: 100%;
  max-width: 280px;
  margin: 16px 0;
  display: block;
  border: none;
  padding: 18px 0 10px;
  border-bottom: solid 1px #009688;
  -webkit-transition: all 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
  transition: all 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(96%, rgba(255, 255, 255, 0)), color-stop(4%, #009688));
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #009688 4%);
  background-position: -100% 0;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  color: #00302c;
}
input[type=number]:focus,
input[type=text]:focus,
input[type=password]:focus,
input[type=datetime-local]:focus {
  -webkit-box-shadow: none;
          box-shadow: none;
  outline: none;
  background-position: 0 0;
}
input[type=number]:focus::-webkit-input-placeholder,
input[type=text]:focus::-webkit-input-placeholder,
input[type=password]:focus::-webkit-input-placeholder,
input[type=datetime-local]:focus::-webkit-input-placeholder {
  color: #009688;
  font-size: 11px;
  -webkit-transform: translateY(-20px);
          transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus:-ms-input-placeholder,
input[type=text]:focus:-ms-input-placeholder,
input[type=password]:focus:-ms-input-placeholder,
input[type=datetime-local]:focus:-ms-input-placeholder {
  color: #009688;
  font-size: 11px;
  transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus::-ms-input-placeholder,
input[type=text]:focus::-ms-input-placeholder,
input[type=password]:focus::-ms-input-placeholder,
input[type=datetime-local]:focus::-ms-input-placeholder {
  color: #009688;
  font-size: 11px;
  transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus::placeholder,
input[type=text]:focus::placeholder,
input[type=password]:focus::placeholder,
input[type=datetime-local]:focus::placeholder {
  color: #009688;
  font-size: 11px;
  -webkit-transform: translateY(-20px);
          transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:invalid,
input[type=text]:invalid,
input[type=password]:invalid,
input[type=datetime-local]:invalid {
  background: -webkit-gradient(linear, left top, left bottom, color-stop(96%, rgba(255, 255, 255, 0)), color-stop(4%, red));
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, red 4%);
}

/** Utils **/
.hide {
  display: none !important;
}

/** Switch **/
.switch-input {
  display: none;
}

.switch-label {
  position: relative;
  display: inline-block;
  min-width: 148px;
  cursor: pointer;
  font-weight: 500;
  text-align: left;
  margin: 0;
  padding: 4px 0 4px 44px;
}

.switch-label:before, .switch-label:after {
  content: "";
  position: absolute;
  margin: 0;
  outline: 0;
  top: 50%;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
}

.switch-label:before {
  left: 1px;
  width: 34px;
  height: 14px;
  background-color: #DDD;
  border-radius: 8px;
}

.switch-label:after {
  left: 0;
  width: 20px;
  height: 20px;
  background-color: #FAFAFA;
  border-radius: 50%;
  -webkit-box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
}

.switch-input:checked + .switch-label:after {
  background-color: #4CAF50;
  -webkit-transform: translate(80%, -50%);
          transform: translate(80%, -50%);
}

.switch-input:checked + label[for=beer-temp].switch-label:after {
  background-color: #29aa29;
}

.switch-input:checked + label[for=beer-set].switch-label:after {
  background-color: #f06464;
}

.switch-input:checked + label[for=fridge-temp].switch-label:after {
  background-color: #59b8ff;
}

.switch-input:checked + label[for=fridge-set].switch-label:after {
  background-color: #ffa14c;
}

.switch-input:checked + label[for=room-temp].switch-label:after {
  background-color: #AAAAAA;
}

.switch-input:checked + label[for=gravity].switch-label:after {
  background-color: #990099;
}

.switch-input:checked + label[for=aux-temp].switch-label:after {
  background-color: #f5e127;
}

.switch-input:checked + label[for=filtersg].switch-label:after {
  background-color: #000abb;
}

.switch-input:checked + label[for=pressure].switch-label:after {
  background-color: #0000EE;
}

.switch-input:checked + label[for=pressure-set].switch-label:after {
  background-color: #f06464;
}

.switch-input:checked + label[for=carbonation].switch-label:after {
  background-color: #AAAAAA;
}

.switch-input:checked + label[for=humidity].switch-label:after {
  background-color: #2222DD;
}

.switch-input:checked + label[for=humidity-set].switch-label:after {
  background-color: #EE1111;
}

.switch-input:checked + label[for=room-humidity].switch-label:after {
  background-color: #AAAAAA;
}

/** Modal **/
.modal {
  display: none;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow-y: auto;
  overflow-x: hidden;
  z-index: 1000;
  -webkit-transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  -webkit-transition-delay: 0s;
          transition-delay: 0s;
  background: rgba(0, 0, 0, 0.3);
}

.modal-content {
  position: relative;
  padding: 2.4rem;
  background: #FFF;
  background-clip: padding-box;
  -webkit-box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.25);
          box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.25);
  -webkit-transition: all 0.25s cubic-bezier(0.23, 1, 0.32, 1);
  transition: all 0.25s cubic-bezier(0.23, 1, 0.32, 1);
  max-width: 600px;
  padding: 2rem;
}
.modal-content h2.message {
  font-size: 18px;
  font-weight: bold;
  text-transform: uppercase;
}

/** Buttons **/
.btn {
  display: inline-block;
  position: relative;
  cursor: pointer;
  height: 35px;
  line-height: 35px;
  padding: 0 1.5rem;
  font-size: 15px;
  font-weight: 600;
  letter-spacing: 0.8px;
  text-align: center;
  text-transform: uppercase;
  vertical-align: middle;
  white-space: nowrap;
  outline: none;
  border: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
  background-color: transparent;
  margin-right: 8px;
}
.btn[disabled] {
  color: #BDBDBD;
}
.btn[disabled]:hover {
  background-color: transparent;
  cursor: not-allowed;
}

.btn--raised {
  background-color: #009688;
  color: #fff;
  -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}
.btn--raised:hover {
  background-color: #00635a;
}

.btn--primary {
  color: #009688;
}

.btn:hover {
  background-color: rgba(153, 153, 153, 0.2);
  cursor: pointer;
}

/* Data panes */
[side] {
  -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
  width: 300px;
  padding: 16px;
  overflow-y: auto;
  background: #EEE;
}
@media (max-width: 900px) {
  [side] {
    width: 100%;
    -webkit-box-ordinal-group: 6;
        -ms-flex-order: 5;
            order: 5;
  }
}

.data-pane {
  list-style-type: none;
  display: block;
}
.data-pane .heading {
  border-bottom: 1px solid rgba(0, 0, 0, 0.64);
  padding-top: 8px;
  padding-bottom: 4px;
  margin-bottom: 4px;
}
.data-pane .heading strong {
  text-transform: uppercase;
  display: inline-block;
}
.data-pane .heading #lcdControlState:empty + .for {
  display: none;
}

/** Chart **/
.chart {
  width: calc(100% - 280px);
}
@media (max-width: 599px) {
  .chart {
    width: 100%;
    margin-bottom: 16px;
  }
}

.chart-main {
  height: 390px;
}

.chart-p {
  height: 130px;
}

.chart-legend {
  list-style-type: none;
  width: 280px;
}

.chart-legend-row {
  padding: 8px 16px 0 16px;
}
.chart-legend-row > div {
  display: inline-block;
}
.chart-legend-row .toggle {
  width: 12px;
  height: 12px;
  margin-right: 8px;
  border-radius: 100%;
  border: 1px solid #000;
}
.chart-legend-row .toggle:hover {
  cursor: pointer;
}
.chart-legend-row.time {
  background-color: #ddeeff;
  padding-bottom: 8px;
}

.forced-hidden {
  display: none !important;
}

#gravity-sg:hover,
#gravity-og:hover {
  cursor: pointer;
}

.legend-label {
  width: 100px;
  font-weight: bold;
}
.legend-label:hover {
  cursor: pointer;
}

#formula-btn {
  float: right;
  display: none;
  font-style: italic;
  text-decoration: underline;
}
#formula-btn:hover {
  cursor: pointer;
}

#polynomialpane .modal-content {
  position: relative;
  max-width: 800px;
}

#pointlist {
  border-collapse: collapse;
}

#pointlist th {
  border: solid 1px;
}

#pointlist td {
  border: solid 1px;
  border-collapse: collapse;
}

#xclose {
  float: right;
  font-size: 14px;
  color: red;
}
#xclose:hover {
  cursor: pointer;
}

/** WIFI **/
.wifi-bars {
  position: relative;
  height: 16px;
  width: 24px;
  display: inline-block;
}

.no-display {
  display: none !important;
}

#wifisignal {
  font-size: 12pt;
  color: black;
  font-family: Courier New, Courier, monospace;
  position: absolute;
  top: 6px;
  left: 4px;
  display: none;
}

.rssi-bar {
  position: absolute;
  bottom: 0;
  float: left;
  width: 4px;
  border-radius: 1px;
  background-color: #444;
}

.rssi-bar1 {
  height: 4px;
  left: 0px;
}

.rssi-bar2 {
  height: 8px;
  left: 6px;
}

.rssi-bar3 {
  height: 12px;
  left: 12px;
}

.rssi-bar4 {
  height: 16px;
  left: 18px;
}

/** FG State **/
#fgstate {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  margin: 6px 0 0 0;
  border: 0px;
}

.platounit {
  display: none;
}

/*# sourceMappingURL=style.css.map */
</style>
</head>

<body onload="init()">

    <header layout horizontal main-justified cross-center relative class="header">
    <h1 class="header_title"><span id="hostname">BrewPiLess</span> <span id="verinfo" class="header_version-display"></span></h1>
    <div navigation>
        <div menutoggle>
            <input type="checkbox">
            <span></span>
            <span></span>
            <span></span>
            <ul class="options">
                <li>
                    <a href="/index.htm">
                        graf
                    </a>
                </li>
                <li>
                    <a href="/control.htm">
                        ovl√°danie
                    </a>
                </li>
                <li>
                    <a href="/logging.htm">
                        z√°znamy
                    </a>
                </li>
                <li>
                    <a href="/setup.htm">
                        nastavenie
                    </a>
                </li>
                <li>
                    <a href="/config.htm">
                        konfigur√°cia
                    </a>
                </li>
                <li>
                    <a href="/gravity.htm">
                        hustota
                    </a>
                    </li><li>
                        <a href="/pressure.htm">
                            tlak
                        </a>
                    </li>
     
                
            </ul>
        </div>
    </div>
</header>
    <div style="display:none">
        <span id="ylabel">Teplota</span>
        <span id="y2label">Hustota</span>
        <span id="psilabel">Tlak(psi)</span>
        <span id="vollabel">Objem CO2</span>
        <span id="rhlabel">Relative Humidity</span>
    </div>

    <div viewport layout horizontal>
        <div side>
            <div id="status" class="status-display">
                <ul id="status-pane" class="data-pane status-pane">
                    <li class="heading" layout horizontal main-justified><strong>Stav:</strong>
                        <div style="display: inline-block"><strong id="lcdControlState"></strong></div>
                    </li>
                    <li layout horizontal main-justified><span class="descriptor">Re≈æim:</span><span id="lcdControlMode"></span></li>
                    <li layout horizontal main-justified><span class="descriptor">Teplota piva:</span><span id="lcdBeerTemp"></span></li>
                    <li layout horizontal main-justified><span class="descriptor">Nastaven√° teplota piva:</span><span id="lcdBeerSet"></span></li>
                    <li layout horizontal main-justified><span class="descriptor">Teplota chladniƒçky:</span><span id="lcdFridgeTemp"></span></li>
                    <li layout horizontal main-justified><span class="descriptor">Nastaven√° teplota chladniƒçky:</span><span id="lcdFridgeSet"></span></li>
                    <li layout horizontal main-justified><span class="descriptor">Teplota v miestnosti:</span><span id="lcdRoomTemp"></span></li>
                    <li layout horizontal main-justified class="no-display" id="humidity-info"><span class="descriptor">Chamber Humidity</span><span id="humidity"></span></li>
                    <li layout horizontal main-justified class="no-display" id="room-humidity-info"><span class="descriptor">Room Humidity</span><span id="room-humidity"></span></li>

                </ul>
            </div>

            <ul id="gravity-pane" class="data-pane gravity-pane">
                <li class="heading"><strong>√ödaje hustoty:</strong></li>
                <li layout horizontal main-justified><span class="descriptor">P√¥vodn√° hustota (OG):</span><span> <span id="gravity-og" onclick="inputOG()">--</span><span class="platounit">&deg;P</span></span>
                </li>
                <li layout horizontal main-justified><span class="descriptor">≈†pecifick√° hustota (SG)</span><span> <span id="gravity-sg" onclick="inputSG()">--</span><span class="platounit">&deg;P</span></span>
                </li>
                <li layout horizontal main-justified><span class="descriptor">Koneƒçn√Ω stav hustoty:</span>
                    <div id="fgstate"></div>
                </li>
                <li layout horizontal main-justified><span class="descriptor">ATT:</span><span><span id="gravity-att"> --</span>%</span>
                </li>
                <li layout horizontal main-justified><span class="descriptor">ABV:</span><span><span id="gravity-abv"> --</span>%</span>
                </li>

            </ul>
            <ul class="data-pane gravity-device-pane">
                <li class="heading"><strong><span class="ispindel-info"> iSpindel √∫daje:</span><span class="tilt-info">Tilt</span> </strong></li>
                <li class="ispindel-info" layout horizontal main-justified><span class="descriptor">N√°klon:</span> <span id="iSpindel-tilt">--</span></li>
                <li class="ispindel-info" layout horizontal main-justified><span class="descriptor">Bat√©rie:</span> <span id="iSpindel-battery">--</span></li>

                <li layout horizontal main-justified><span class="descriptor">Temperature</span> <span id="gravity-device-temp">--</span></li>

                <li layout horizontal main-justified id="ispindel-rssi-line">
                    <span class="descriptor">RSSI</span> <div id="gravity-device-rssi" class="wifi-bars">
                        <div class="rssi-bar rssi-bar1"></div>
                        <div class="rssi-bar rssi-bar2"></div>
                        <div class="rssi-bar rssi-bar3"></div>
                        <div class="rssi-bar rssi-bar4"></div>
                    </div>
                </li>

                <li layout horizontal main-justified><span class="descriptor">Posledn√° aktualiz√°cia:</span> <span id="gravity-device-last">--</span></li>
            </ul>

            <ul class="data-pane ptc-pane" id="ptc-pane" style="display:none">
                <li class="heading" layout horizontal main-justified><strong>Kontrola teploty glykolu:</strong>
                    <div style="display: inline-block"><strong><span id="ptc-state-idle">NEƒåINN√ù</span><span id="ptc-state-run" style="display:none">SPUSTEN√ù</span></strong></div>
                </li>
                <li layout horizontal main-justified><span class="descriptor"></span>
                    pre <span id="ptc-time"></span></li>
                <li layout horizontal main-justified><span class="descriptor">Rozsah:</span> <span id="ptc-set"></span></li>
            </ul>

            <ul class="data-pane capping-info-pane">
                <li class="heading" layout horizontal main-justified><strong> Stav uz√°veru: </strong>
                    <div style="display: inline-block">
                        <strong><span id="capstate-open" class="capstate">Otvori≈•</span>
                        <span id="capstate-close" class="capstate">Uzavret√©</span></strong> </div>
                </li>
                <li layout horizontal main-justified>
                    <span class="descriptor">Podmienka:</span>
                    <div style="display: inline-block">
                        <span id="cs-sgcon" class="capstate">gravity &lt;= <span id="capgravityset"></span></span>
                        <span id="cs-timecon" class="capstate">after <span id="captimeset"></span></span>
                        <span id="cs-mancap" class="capstate">Manu√°lne uzavret√©</span>
                        <span id="cs-manopen" class="capstate">Manu√°lne otvoren√©</span>
                    </div>
                </li>
            </ul>
            <ul class="data-pane" id="pressure-info-pane">
                <li layout horizontal main-justified><span class="descriptor">Pressure</span><span><span id="pressure-psi"></span> psi</span>
                </li>
            </ul>


            <ul class="data-pane">
                <li class="heading"><strong>Syst√©m:</strong></li>
                <li layout horizontal main-justified><span class="descriptor">Zapisujem z√°znam:</span><span id="recording"></span></li>
                <li layout horizontal main-justified>
                    <span class="descriptor">WiFi:</span>
                    <div id="rssi" class="wifi-bars">
                        <div class="rssi-bar rssi-bar1"></div>
                        <div class="rssi-bar rssi-bar2"></div>
                        <div class="rssi-bar rssi-bar3"></div>
                        <div class="rssi-bar rssi-bar4"></div>
                    </div>
                </li>
            </ul>
        </div>
        <div main flex>
            <div layout horizontal>
                <div class="chart">
                    <div id="div_g" class="chart-main"></div>
                    <div id="div_p" class="chart-p pressure-group forced-hidden"></div>
                    <div id="div_h" class="chart-p humidity-group forced-hidden"></div>
                </div>
                <ul flex class="chart-legend">
                    <li layout horizontal main-justified class="chart-legend-row time">
                        <span class="beer-chart-legend-time">D√°tum / ƒåas</span>
                        <span class="beer-chart-state">hodnota</span>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row beer-temp">
                        <input type="checkbox" id="beer-temp" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(BeerTempLine)" for="beer-temp" class="switch-label">Teplota piva</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row beer-set">
                        <input type="checkbox" id="beer-set" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(BeerSetLine)" for="beer-set" class="switch-label">Nastaven√° teplota piva</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row fridge-temp">
                        <input type="checkbox" id="fridge-temp" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(FridgeTempLine)" for="fridge-temp" class="switch-label">Teplota chladniƒçky</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row fridge-set">
                        <input type="checkbox" id="fridge-set" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(FridgeSetLine)" for="fridge-set" class="switch-label">Nastaven√° teplota chladniƒçky</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row room-temp">
                        <input type="checkbox" id="room-temp" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(RoomTempLine)" for="room-temp" class="switch-label">Teplota v miestnosti</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row aux-temp">
                        <input type="checkbox" id="aux-temp" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(AuxTempLine)" for="aux-temp" class="switch-label">Aux teplota</label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row gravity">
                        <input type="checkbox" id="gravity" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(GravityLine)" for="gravity" class="switch-label">Hustota<span class="platounit">&deg;P</span></label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row filtersg">
                        <input type="checkbox" id="filtersg" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(FilteredSgLine)" for="filtersg" class="switch-label">Filtrovan√© SG<span class="platounit">&deg;P</span></label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row pressure pressure-group forced-hidden">
                        <input type="checkbox" id="pressure" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(PressureLine,1)" for="pressure" class="switch-label">Tlak</label>
                        <div class="legend-value">--</div>
                    </li>

                    <li layout horizontal main-justified class="chart-legend-row pressure-set pressure-group forced-hidden">
                        <input type="checkbox" id="pressure-set" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(PressureSetLine,1)" for="pressure-set" class="switch-label">Nastavenie tlaku</label>
                        <div class="legend-value">--</div>
                    </li>

                    <li layout horizontal main-justified class="chart-legend-row carbonation pressure-group forced-hidden">
                        <input type="checkbox" id="carbonation" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(CarbonationLine,1)" for="carbonation" class="switch-label">Objem CO2</label>
                        <div class="legend-value">--</div>
                    </li>

                    <li layout horizontal main-justified class="chart-legend-row humidity humidity-group forced-hidden">
                        <input type="checkbox" id="humidity" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(ChamberHumidityLine,2)" for="humidity" class="switch-label"> Humidity </label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row set-humidity humidity-group forced-hidden">
                        <input type="checkbox" id="humidity-set" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(SetHumidityLine,2)" for="humidity-set" class="switch-label"> Target RH </label>
                        <div class="legend-value">--</div>
                    </li>
                    <li layout horizontal main-justified class="chart-legend-row room-humidity humidity-group forced-hidden">
                        <input type="checkbox" id="room-humidity" name="set-name" class="switch-input" checked="checked">
                        <label onclick="BChart.toggle(RoomHumidityLine,2)" for="room-humidity" class="switch-label"> Room RH </label>
                        <div class="legend-value">--</div>
                    </li>

                    <li layout horizontal main-justified class="chart-legend-row" id="formula-btn" onclick="openpolynomialpane()">f</li>
                </ul>
            </div>

        </div>
    </div>

    <footer layout horizontal main-justified cross-center class="footer">
    <span>BrewPiLess by <a href="https://github.com/vitotai/">vitotai</a></span>
    <span><a href="https://github.com/vitotai/BrewPiLess/">project on GitHub</a></span>
</footer>

    <!-- Notification -->
    <div class="error">
        <div class="errormsg" id="error_waitbpl">
            ƒçak√° na aktualiz√°ciu zo skriptu ...
        </div>
        <div class="errormsg" id="error_connect">
            Nepodarilo sa pripoji≈• k serveru.
        </div>
        <div class="errormsg" id="error_noupdate">
            Riadiaca jednotka neaktualizuje √∫daje.
        </div>
    </div>


    <!-- Modals -->
    <div id="dlg_loading" class="modal">
        <div class="modal-content">
            <p>
                Komunikujem s riadiacou jednotkou BrewPiLess...
            </p>
        </div>
    </div>


    <div id="dlg_addgravity" class="modal">
        <div class="modal-content">
            <span class="message sg">
                Prida≈• z√°znam hustoty:
            </span>
            <span class="message og">
                Nastavi≈• OG:
            </span>
            <p>
                Pros√≠m, vlo≈æte hodnoty hustoty.
            </p>
            <ul style="list-style-type: none">
                <li>
                    <input class="sginput" type="text" size="6" onchange="inputsg_change()"><span class="platounit">&deg;P</span> @
                    <input class="tempinput" type="text" size="6" value="20" onchange="inputsg_change()">
                    <sapn class="temp-unit">&deg;C</sapn>
                </li>
                <li>
                    ~ <span id="sginput-hmc"></span> @ <span id="sginput-hm-cal-temp"></span>
                    <sapn class="temp-unit">&deg;C</sapn>
                </li>
                <li>
                    ~ <span id="sginput-sg-ispindel"></span><span class="platounit">&deg;P</span> @ <span id="sginput-ispindel-temp"></span>
                    <sapn class="temp-unit">&deg;C</sapn>
                </li>
            </ul>

            <div class="dialog-buttons">
                <button class="btn btn--rise" onclick="dismissgravity()">Zru≈°i≈•</button>
                <button class="btn btn--rise" onclick="inputgravity()">OK</button>
            </div>
        </div>
    </div>

    <div id="polynomialpane" class="modal">
        <div class="modal-content">
            <div id="xclose" onclick="closepolynomialpane()">X</div>
            <table>
                <tr>
                    <td>
                        <table id="pointlist">
                            <thead>
                                <tr>
                                    <th>
                                        N√°klon
                                    </th>
                                    <th>
                                        SG<span class="platounit">&deg;P</span>
                                    </th>
                                    <th>
                                        Vypoƒç√≠tan√©
                                    </th>
                                    <th>
                                        Chyba
                                    </th>
                                    <th>
                                        Ignorovan√©
                                    </th>
                                </tr>
                            </thead>
                            <tobdy>
                                <tr class="pl_calpoint">
                                    <td class="pl_tilt"></td>
                                    <td class="pl_sg"></td>
                                    <td class="pl_value"></td>
                                    <td class="pl_error"></td>
                                    <td><input class="pl_ignored_cb" type="checkbox"></td>
                                </tr>
                            </tobdy>
                        </table>
                        <div style="float:right;"><button class="btn btn--rise" onclick="applyIgnoreMask()">Pou≈æi≈•</button></div>
                    </td>
                    <td>
                        <div id="graph"></div>
                        <span id="polynormial"></span>
                    </td>
                </tr>
            </table>
        </div>
    </div>

</body>

</html>