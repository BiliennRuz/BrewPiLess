<!DOCTYPE html>

<html lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>
        BrewPiless Logging Setting
    </title>
    <meta name="apple-mobile-web-app-title" content="BrewPiLess">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <script>
function invoke(arg) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4) {
            if (xhttp.status == 200) {
                arg.success(xhttp.responseText);
            } else {
                xhttp.onerror(xhttp.status);
            }
        }
    };
    xhttp.ontimeout = function() {
            if (typeof arg["timeout"] != "undefined")
                arg.timeout();
            else
                xhttp.onerror(-1);
        },
        xhttp.onerror = function(a) {
            if (typeof arg["fail"] != "undefined")
                arg.fail(a);
        };

    xhttp.open(arg.m, arg.url, true);
    if (typeof arg["data"] != "undefined") {
        xhttp.setRequestHeader("Content-Type", (typeof arg["mime"] != "undefined") ? arg["mime"] : "application/x-www-form-urlencoded");
        xhttp.send(arg.data);
    } else
        xhttp.send();
}

var BWF = {
//    BrewProfile: "/brewing.json",
    process: function(msg) {
        if (this.raw != null) {
            this.raw(msg);
            return;
        }
        //console.log("rcv:" + msg);
        eval("m={" + msg + "}");
        //	console.log("json:"+m);
        for (var key in m) {
            if (typeof this.handlers[key] != "undefined") {
                this.handlers[key](m[key]);
            }
        }
    },
    on: function(lb, handler) {
        this.handlers[lb] = handler;
    },
    send: function(data) {
        if (this.ws.readyState == 1) this.ws.send(data);
    },
    reconnecting: false,
    status:function(){
        if(typeof this.ws == "undefined") return -1; // not initialized
        if(this.ws.readyState == 1) return 0;
        return 1;  
    },
    connect: function() {
        var me = this;
        if (typeof WebSocket !== "undefined") {
            var ws = new WebSocket('ws://' + document.location.host + '/ws');
            me.ws = ws;
            ws.onopen = function() {
                console.log("Connected");
                me.onconnect();
            };

            ws.onclose = function() {
                if (me.reconnecting) return;
                console.log("WS close");
                me.error(-2);
                if (me.auto) setTimeout(function() { me.reconnect(); }, 5000);
            };

            /*ws.onerror = function() {
                console.log("ws error");
            };*/

            ws.onmessage = function(e) {
                me.process(e.data);
            };
        } else {
            //console.log("not support WebSocket");
            alert("Error! WebSocket Not Supported!");
        }
    },
    reconnect: function(forced) {
        forced = (typeof forced == "undefined") ? false : true;
        var me = this;
        if (me.reconnecting) return;
        if (!forced && me.ws.readyState == 1) return;
        console.log("reconnect forced:" + forced + " state:" + me.ws.readyState);
        me.reconnecting = true;
        me.ws.close();
        // this might triger onerror, and result in "reconnect" call again.
        me.connect();
        me.reconnecting = false;
    },
    init: function(arg) {
        var b = this;
        b.error = (typeof arg.error == "undefined") ? function() {} : arg.error;
        b.handlers = (typeof arg.handlers == "undefined") ? {} : arg.handlers;
        b.raw = (typeof arg.raw == "undefined") ? null : arg.raw;
        b.onconnect = (typeof arg.onconnect == "undefined") ? function() {} : arg.onconnect;
        b.auto = (typeof arg.reconnect == "undefined") ? true : arg.reconnect;

        b.connect();
    },
    save: function(file, data, success, fail) {
        invoke({
            m: "POST",
            url: "/fputs",
            data: "path=" + file + "&content=" + encodeURIComponent(data),
            success: function() { success(); },
            fail: function(e) { fail(e); }
        });
    },
    load: function(file, success, fail) {
        invoke({
            m: "GET",
            url: file,
            success: function(d) { success(d); },
            fail: function(e) { fail(e); }
        });
    }
};
</script>
    <script>
var JSVERSION = "4.2";

function s_ajax(b) {
    var c = new XMLHttpRequest();
    c.onreadystatechange = function() {
        if (c.readyState == 4) {
            if (c.status == 200) {
                b.success(c.responseText)
            } else {
                c.onerror(c.status)
            }
        }
    };
    c.ontimeout = function() {
        if (typeof b["timeout"] != "undefined") b.timeout();
        else c.onerror(-1)
    }, c.onerror = function(a) {
        if (typeof b["fail"] != "undefined") b.fail(a)
    };
    c.open(b.m, b.url, true);
    if (typeof b["data"] != "undefined") {
        c.setRequestHeader("Content-Type", (typeof b["mime"] != "undefined") ? b["mime"] : "application/x-www-form-urlencoded");
        c.send(b.data)
    } else c.send()
}

var Q = function(d) {
    return document.querySelector(d);
};

function doAll(c,act){
    document.querySelectorAll(c).forEach(function(i){act(i)});
}

function C2F(c) {
    return Math.round((c * 1.8 + 32) * 10) / 10
}

function F2C(f) {
    return Math.round((f - 32) / 1.8 * 10) / 10
}

function openDlgLoading() {
    document.getElementById('dlg_loading').style.display = "block";
}

function closeDlgLoading() {
    document.getElementById('dlg_loading').style.display = "none";
}

var BrewMath = {
    abv: function(og, fg) {
        return ((76.08 * (og - fg) / (1.775 - og)) * (fg / 0.794)).toFixed(1);
    },
    abvP: function(og, fg) {
        return BrewMath.abv(BrewMath.pla2sg(og), BrewMath.pla2sg(fg));
    },
    att: function(og, fg) {
        return Math.round((og - fg) / (og - 1) * 100);
    },
    attP: function(pog, pfg) {
        return Math.round((pog - pfg) / pog * 100);
    },
    sg2pla: function(sg) {
        return (((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622);
    },
    pla2sg: function(pla) {
        return 1 + (pla / (258.6 - ((pla / 258.2) * 227.1)));
    },
    tempCorrectionF(sg, t, c) {
        var nsg = sg * ((1.00130346 - 0.000134722124 * t + 0.00000204052596 * t * t - 0.00000000232820948 * t * t * t) /
            (1.00130346 - 0.000134722124 * c + 0.00000204052596 * c * c - 0.00000000232820948 * c * c * c));
        return nsg;
    },
    pTempCorrectionF(sg, t, c) {
        return BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(sg), t, c));
    },
    tempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.tempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    },
    pTempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.pTempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    }
};

Date.prototype.shortLocalizedString = function() {
    var y = this.getYear() + 1900;
    var re = new RegExp('[^\d]?' + y + '[^\d]?');
    var n = this.toLocaleDateString();
    var ds = n.replace(re, "");
    var HH = this.getHours();
    var MM = this.getMinutes();

    function T(x) {
        return (x > 9) ? x : ("0" + x);
    }
    return ds + " " + T(HH) + ":" + T(MM);
};

function getActiveNavItem() {
    var path = window.location.pathname.split("/").pop();
    if (path == "") path = "index.htm";
    var element = Q('.options>li>a[href="/' + path + '"]');
    if(element) element.className += 'active';
}

function formatDate(dt) {
    //	var y = dt.getFullYear();
    //	var M = dt.getMonth() +1;
    //	var d = dt.getDate();
    var h = dt.getHours();
    var m = dt.getMinutes();
    //    var s = dt.getSeconds();
    function dd(n) {
        return (n < 10) ? '0' + n : n;
    }
    //	return dd(M) + "/" + dd(d) + "/" + y +" "+ dd(h) +":"+dd(m)+":"+dd(s);
    //	return dd(M) + "/" + dd(d) +" "+ dd(h) +":"+dd(m);
    return dt.toLocaleDateString() + " " + dd(h) + ":" + dd(m);
}

function formatDateForPicker(date) {
    var h = date.getHours();
    var m = date.getMinutes();

    function dd(n) { return (n < 10) ? '0' + n : n; }
    return date.getFullYear() + "-" + dd(date.getMonth() + 1) + "-" + dd(date.getDate()) + "T" + dd(h) + ":" + dd(m);
}
</script>
    <script>
var logurl = "log";

Number.prototype.format = function(n, x, s, c) {
    var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
        num = this.toFixed(Math.max(0, ~~n));

    return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
};
String.prototype.escapeJSON = function() {
    return this.replace(/[\\]/g, '\\\\')
        .replace(/[\"]/g, '\\\"')
        .replace(/[\/]/g, '\\/')
        .replace(/[\b]/g, '\\b')
        .replace(/[\f]/g, '\\f')
        .replace(/[\n]/g, '\\n')
        .replace(/[\r]/g, '\\r')
        .replace(/[\t]/g, '\\t');
};


var logs = {
    url: "loglist.php",
    rmurl: "loglist.php?rm=",
    starturl: "loglist.php?start=",
    stopurl: "loglist.php?stop=1",
    dlurl: "loglist.php?dl=",
    ll: [],
    fs: {},
    logging: false,
    vname: function(name) {
        if (name == "") return false;
        if (name.match(/[\W]/g)) return false;
        return true;
    },
    dupname: function(name) {
        var ret = false;
        this.ll.forEach(function(log) {
            if (name == log.name) ret = true;
        });
        return ret;
    },
    fsinfo: function(s, u) {
        Q("#fssize").innerHTML = s.format(0, 3, ',');
        Q("#fsused").innerHTML = u.format(0, 3, ',');
        Q("#fsfree").innerHTML = (s - u).format(0, 3, ',');
    },
    stoplog: function() {
        var t = this;
        if (t.logging) {
            // stop
            if (confirm("Stop current logging?")) {
                //console.log("Stop logging");
                var n = Q("#logname").value.trim();
                s_ajax({
                    url: t.stopurl + n,
                    m: "GET",
                    success: function(d) {
                        location.reload();
                    },
                    fail: function(d) {
                        alert("Failed to stop for:" + d);
                    }
                });
            }
        }
    },
    startlog: function() {
        var t = this;
        if (!t.logging) {
            if (t.ll.length >= 10) {
                alert("Too many logs. Delete some before creating new.");
                return;
            }
            if ((t.fs.size - t.fs.used) <= t.fs.block * 2) {
                alert("Not enough free space!");
                return;
            }
            var name = Q("#logname").value.trim();
            if (t.vname(name) === false) {
                alert("Invalid file name, no special characters allowed.");
                return;
            }
            if (t.dupname(name)) {
                alert("Duplicated name.");
                return;
            }
            var arg = "";
            var calispindel = Q("#calispindel").checked;
            if (calispindel) {
                var tilt = parseFloat(Q("#tiltinw").value.trim());
                var reading = parseFloat(Q("#hydrometer").value.trim());
                if (window.plato) reading = 0;
                if (isNaN(tilt)) {
                    alert("tilt value is necessary!");
                } else if (!window.plato && (isNaN(tilt) || isNaN(reading))) {
                    alert("tilt value and hydrometer reading is necessary!");
                    return;
                }
                arg = "&tw=" + tilt + "&hr=" + reading;
            }
            var wobf = Q("#wobf").checked;
            arg += "&wobf=" + (wobf? "1":"0");

            if (confirm("Start new logging?")) {
                //console.log("Start logging");
                s_ajax({
                    url: t.starturl + name + arg,
                    m: "GET",
                    success: function(d) {
                        location.reload();
                    },
                    fail: function(d) {
                        alert("Failed to start for:" + d);
                    }
                });
            }
        }
    },
    recording: function(n, t) {
        this.logging = true;
        var d = new Date(t * 1000);
        Q("#start-log-date").innerHTML = d.toLocaleString();
        Q("#loggingtitle").innerHTML = n;
        Q("#logstartinput").style.display = "none";
        Q("#logstopinput").style.display = "block";
    },
    stop: function() {
        this.logging = false;
        Q("#logstartinput").style.display = "block";
        Q("#logstopinput").style.display = "none";
    },
    //view:function(n){
    //	alert("View " + this.ll[n].name);
    //	window.open(this.vurl+ n);
    //},
    rm: function(n) {
        var t = this;
        if (confirm("Delete the log " + t.ll[n].name)) {
            console.log("rm " + t.ll[n].name);
            s_ajax({
                url: t.rmurl + n,
                m: "GET",
                success: function(d) {
                    var r = JSON.parse(d);
                    t.fs = r;
                    t.fsinfo(r.size, r.used);
                    t.ll.splice(n, 1);
                    t.list(t.ll);
                },
                fail: function(d) {
                    alert("Failed to delete for:" + d);
                }
            });
        }
    },
    dl: function(n) {
        //console.log("DL " +this.ll[n].name);
        window.open(this.dlurl + n);
    },
    list: function(l) {
        var tb = Q("#loglist").querySelector("tbody");
        var tr;
        while (tr = tb.querySelector("tr:nth-of-type(2)"))
            tb.removeChild(tr);

        var t = this;
        var row = t.row;
        l.forEach(function(i, idx) {
            var name = i.name;
            var date = new Date(i.time * 1000);
            var nr = row.cloneNode(true);
            nr.querySelector(".logid").innerHTML = name;
            nr.querySelector(".logdate").innerHTML = date.toLocaleString();
            nr.querySelector(".dlbutton").onclick = function() {
                t.dl(idx);
            };
            //		nr.querySelector(".viewbutton").onclick=function(){t.view(idx);};
            nr.querySelector(".rmbutton").onclick = function() {
                t.rm(idx);
            };
            tb.appendChild(nr);
        });

    },
    init: function() {
        var t = this;
        Q("#startlogbutton").onclick = function() {
            t.startlog();
        };
        Q("#stoplogbutton").onclick = function() {
            t.stoplog();
        };

        t.row = Q("#loglist").querySelector("tr:nth-of-type(2)");
        t.row.parentNode.removeChild(t.row);
        s_ajax({
            url: t.url,
            m: "GET",
            success: function(d) {
                var r = JSON.parse(d);
                t.fs = r.fs;
                if (r.rec)
                    t.recording(r.log, r.start);
                t.ll = r.list;
                t.list(r.list);
                t.fsinfo(r.fs.size, r.fs.used);

                Q("#wobf").checked = (r.wobf !=0);

                if (typeof r["plato"] != "undefined" && r.plato) {
                    window.plato = true;
                    var th = document.querySelectorAll(".tiltwatercorrect");
                    for (var i = 0; i < th.length; i++)
                        th[i].style.display = "none";
                } else window.plato = false;
            },
            fail: function(e) {
                alert("failed:" + e);
            }
        });
    },
};
// for remote logging
function checkurl(t) {
    if (t.value.trim().startsWith("https")) {
        alert("HTTPS is not supported on ESP8266");
    }
}

function checkformat(ta) {
    if (ta.value.length > 256) {
        ta.value = t.value.substring(0, 256);
    }
    Q("#fmthint").innerHTML = "" + ta.value.length + "/256";
}

function cmethod(c) {
    var inputs = document.querySelectorAll('input[name$="method"]');
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id != c.id)
            inputs[i].checked = false;
    }
    window.selectedMethod = c.value;
}

//Serivce specif widget processing
// generic http
function generichttp_get() {
    if (typeof window.selectedMethod == "undefined") {
        alert("select Method!");
        return null;
    }
    var format = Q("#format").value.trim();

    if (window.selectedMethod == "GET") {
        var myRe = new RegExp("\s", "g");
        if (myRe.exec(format)) {
            alert("space is not allowed");
            return null;
        }
    }

    var r = {};
    r.url = Q("#url").value.trim();
    r.format = encodeURIComponent(format.escapeJSON());
    r.method = (Q("#m_post").checked) ? "POST" : "GET";
    r.type = Q("#data-type").value.trim();
    r.service = 3;
    return r;
}

function generichttp_set(r) {
    Q("#service-type").value = "generichttp";
    serviceOption("generichttp");
    window.selectedMethod = r.method;
    Q("#m_" + r.method.toLowerCase()).checked = true;
    Q("#url").value = (r.url === undefined) ? "" : r.url;
    Q("#data-type").value = (r.type === undefined) ? "" : r.type;
    Q("#format").value = (r.format === undefined) ? "" : r.format;
    checkformat(Q("#format"));
}
// ubidots.com
function ubidots_set(r) {
    Q("#service-type").value = "ubidots";
    serviceOption("ubidots");

    // different api    
    var match = /http:\/\/([\w\.]+)\.ubidots\.com\/api\/v1\.6\/devices\/(\w+)\/\?token=(\w+)$/.exec(r.url);

    Q("select[name=ubidots-account]").value = (match[1] == "things") ? 1 : 2;
    Q("#ubidots-device").value = match[2];
    Q("#ubidots-token").value = match[3];

}

function ubidots_get() {
    var device = Q("#ubidots-device").value.trim();
    if (!device) return null;
    var token = Q("#ubidots-token").value.trim();
    if (!token) return null;
    var info = {};
    info.url = (Q("select[name=ubidots-account]").value == 1) ?
        "http://things.ubidots.com/api/v1.6/devices/" + device + "/?token=" + token :
        "http://industrial.api.ubidots.com/v1.6/devices/" + device + "/?token=" + token;

    info.format = encodeURIComponent("{}".escapeJSON());
    info.method = "POST";
    info.type = "application/json";
    info.service = 1;
    return info;
}
// thingspeak.com
function thingspeak_set(r) {
    Q("#service-type").value = "thingspeak";
    serviceOption("thingspeak");

    var values = {};
    var fields = r.format.split('&');
    for (var i = 0; i < fields.length; i++) {
        var pair = fields[i].split("=");
        values[pair[0]] = pair[1];
    }

    Q("#thingspeak-apikey").value = values["api_key"];

    for (var i = 1; i < 9; i++)
        Q("select[name=thingspeak-f" + i + "]").value = (typeof values["field" + i] == "undefined") ?
        "unused" : values["field" + i].substring(1);
}

function thingspeak_get() {
    var apikey = Q("#thingspeak-apikey").value.trim();
    if (!apikey) return null;
    apikey = "api_key=" + apikey;
    var format = apikey;
    for (var i = 1; i < 9; i++) {
        var v = Q("select[name=thingspeak-f" + i + "]").value;
        if (v != "unused") format = format + "&field" + i + "=%" + v;
    }
    if (format == apikey) return null;

    var info = {};
    info.url = "http://api.thingspeak.com/update";
    info.format = encodeURIComponent(format.escapeJSON());
    info.method = "POST";
    info.type = "application/x-www-form-urlencoded";
    info.service = 0;
    return info;
}
//brewfahter
function brewfather_set(r) {
    Q("#service-type").value = "brewfather";
    serviceOption("brewfather");

    var match = /http:\/\/log\.brewfather\.net\/brewpiless\?id=(\w+)$/.exec(r.url);
    Q("#brewfather-id").value = match[1];
    var idmatch = /"id":"([^"]+)"/.exec(r.format);
    Q("#brewfather-device").value = idmatch[1];
}

function brewfather_get(r) {
    var uid = Q("#brewfather-id").value.trim();
    var device = Q("#brewfather-device").value.trim();
    if (!uid || !device) return null;

    var info = {};
    info.url = "http://log.brewfather.net/brewpiless?id=" + uid;

    var format = "{\"id\":\"" + device +
        "\",\"beerTemp\":%b,\"beerSet\":%B,\"fridgeTemp\":%f,\"fridgeSet\":%F,\"roomTemp\":%r,\"gravity\":%g,\"tiltValue\":%t,\"auxTemp\":%a,\"extVolt\":%v,\"timestamp\":%u,\"tempUnit\":\"%U\",\"pressure\":%P,\"mode\":\"%M\",\"humidity\":%h}";

    info.format = encodeURIComponent(format.escapeJSON());;

    info.method = "POST";
    info.type = "application/json";
    info.service = 0;
    return info;
}

//brewfahter
function brewersfriend_set(r) {
    Q("#service-type").value = "brewersfriend";
    serviceOption("brewersfriend");

    var match = /\/\/log\.brewersfriend\.com\/stream\/(\w+)$/.exec(r.url);


    Q("#brewersfriend-apikey").value = match[1];

    var beermatch = /"beer":"([^"]+)"/.exec(r.format);
    Q("#brewersfriend-beer").value = beermatch[1];

    var gumatch = /"gravity_unit":"([P|G])"/.exec(r.format);
    if (gumatch[1] == "P") {
        Q("#gu-sg").checked = false;
        Q("#gu-plato").checked = true;
    } else {
        Q("#gu-sg").checked = true;
        Q("#gu-plato").checked = false;
    }
}

function brewersfriend_get(r) {
    var gf = "%g";
    var gu = "G";
    if (Q('input[name="BF-gu"]:checked').value == "gu-plato") {
        var gf = "%p";
        var gu = "P";
    }
    //http://log.brewersfriend.com/stream/[API KEY]
    var apikey = Q("#brewersfriend-apikey").value.trim();
    var beer = Q("#brewersfriend-beer").value.trim();

    var format = "{\"name\":\"%H\",\"temp\": %b,\"temp_unit\": \"%U\",\"gravity\":" + gf +
        ",\"gravity_unit\":\"" + gu + "\",\"ph\": \"\",\"comment\": \"\",\"beer\":\"" + beer + "\",\"battery\":%v,\"RSSI\": \"\",\"angle\": %t}";

    var info = {};
    info.url = 'http://log.brewersfriend.com/stream/' + apikey;

    info.format = encodeURIComponent(format.escapeJSON());;

    info.method = "POST";
    info.type = "application/json";
    info.service = 2; // null string instead of null
    return info;
}
//
function service_set(r) {
    if (r.service == 1) { // ubidots.com 
        ubidots_set(r);
    } if (r.service == 0){ // generic http, auto
        if (/http:\/\/api\.thingspeak\.com\//.exec(r.url))
            thingspeak_set(r);
        else if (/http:\/\/log\.brewfather\.net\//.exec(r.url))
            brewfather_set(r);
        else if (/http:\/\/log\.brewersfriend\.com\//.exec(r.url))
            brewersfriend_set(r);
    } else
        generichttp_set(r);
}

function update() {
    var service = Q("#service-type").value;
    var r;
    var enabled = Q("#enabled").checked;
    if (service == "generichttp") r = generichttp_get();
    else if (service == "ubidots") r = ubidots_get();
    else if (service == "thingspeak") r = thingspeak_get();
    else if (service == "brewfather") r = brewfather_get();
    else if (service == "brewersfriend") r = brewersfriend_get();

    if (enabled && !r) return;
    if (!r) {
        // default
        r = { url: "", format: "", method: "POST", type: "", service:3 };
    }
    r.enabled = enabled;
    r.period = Q("#period").value;
    if (r.period < 60) r.period = 60;
    if (r.period < 900 && (service == "brewfather" || service == "brewersfriend")) r.period=900;

    s_ajax({
        url: logurl,
        m: "POST",
        data: "data=" + JSON.stringify(r),
        success: function(d) {
            alert("Done");
        },
        fail: function(e) {
            alert("failed:" + e);
        }
    });

}

function remote_init(classic) {
    var MinPeriod = { generichttp: 60, thingspeak: 15, brewfather: 900, ubidots: 60,brewersfriend:900 };
    Q("#period").onchange = function() {
        var min = MinPeriod[Q("#service-type").value];
        if (Q("#period").value < min) Q("#period").value = min;
    };

    serviceOption("generichttp");

    s_ajax({
        url: logurl + "?data=1",
        m: "GET",
        success: function(d) {
                var r = JSON.parse(d);
                if (typeof r.enabled == "undefined") return;
                Q("#enabled").checked = r.enabled;
                Q("#period").value = (r.period === undefined) ? 300 : r.period;
                service_set(r);
            }
            /*,
                fail:function(d){
                        alert("error :"+d);
                  }*/
    });
}

function showformat(lab) {
    var f = Q("#formatlist");
    var rec = lab.getBoundingClientRect();
    f.style.display = "block";
    f.style.left = (rec.right + 5) + "px";
    f.style.top = (rec.bottom + 5) + "px";
}

function hideformat() {
    Q("#formatlist").style.display = "none";
}

function serviceOption(opt) {
    var divs = document.querySelectorAll("#service-opt > div");
    for (var i = 0; i < divs.length; i++) {
        var div = divs[i];
        if (div.id == opt) div.style.display = "block";
        else div.style.display = "none";
    }
    Q("#period").onchange();
}

function serviceChange() {
    serviceOption(Q("#service-type").value);
}

function init(classic) {
    if (typeof classic == "undefined") classic = false;
    if (!classic) {
        getActiveNavItem();
        Q("#verinfo").innerHTML = "v" + JSVERSION;
    }

    function readingByTemp() {
        var temp = parseFloat(Q("#watertemp").value);
        var ctemp = parseFloat(Q("#caltemp").value);
        var unit = Q("#tempunit").value;
        if (isNaN(temp) || isNaN(ctemp)) return;
        if (unit == 'C') {
            ctemp = C2F(ctemp);
            temp = C2F(temp);
        }
        var reading = BrewMath.tempCorrectionF(1.0, ctemp, temp);
        Q("#hydrometer").value = reading.toFixed(3);
    }
    Q("#watertemp").onchange = readingByTemp;
    Q("#caltemp").onchange = readingByTemp;
    Q("#tempunit").onchange = readingByTemp;

    remote_init(classic);
    logs.init();

    mqttInit();
}
</script>
    <script>
function mqttLoadSetting() {
    s_ajax({
        url: "mqtt",
        m: "GET",
        success: function(data) {
            var j = JSON.parse(data);
            Object.keys(j).map(function(key) {
                var name = "mqtt_" + key;
                var div = Q(".mqtt-input[name=" + name + "]");
                if (div) {
                    if (div.type == "checkbox") div.checked = (j[key] != 0);
                    else div.value = j[key];
                }
            });
        },
        fail: function(d) {
            alert("error getting data:" + d);
        }
    });
}

function mqttSave() {
    var ins = document.querySelectorAll(".mqtt-input");
    var json = {};
    Object.keys(ins).map(function(key, i) {
        if (ins[i].type != "submit") {
            if (ins[i].name && ins[i].name != "") {
                var val;
                if (ins[i].type == "checkbox") val = (ins[i].checked ? 1 : 0);
                else val = ins[i].value.trim();
                json[ins[i].name.split("_")[1]] = val;
            }
        }
    });

    console.log(JSON.stringify(json));
    s_ajax({
        url: "mqtt",
        data: "data=" + encodeURIComponent(JSON.stringify(json)),
        m: "POST",
        success: function(data) {
            alert("done");
        },
        fail: function(d) {
            alert("error saving data:" + d);
        }
    });
}

function mqttInit() {
    mqttLoadSetting();
    Q("#submitsavemqtt").onclick = function(e) {
        e.preventDefault();
        mqttSave();
        return false;
    };

}

</script>
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
    <style>
/** Colors **/
* {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
}

/* https://github.com/Dogfalo/materialize/blob/master/sass/components/_typography.scss */
a {
  text-decoration: none;
}

html {
  line-height: 1.5;
  font-family: "Roboto", sans-serif;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.87);
}
@media only screen and (min-width: 0) {
  html {
    font-size: 14px;
  }
}
@media only screen and (min-width: 992px) {
  html {
    font-size: 14.5px;
  }
}
@media only screen and (min-width: 1200px) {
  html {
    font-size: 15px;
  }
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 400;
  line-height: 1.1;
}

h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
  font-weight: inherit;
}

h1 {
  font-size: 4.2rem;
  line-height: 110%;
  margin: 2.1rem 0 1.68rem 0;
}

h2 {
  font-size: 3.56rem;
  line-height: 110%;
  margin: 1.78rem 0 1.424rem 0;
}

h3 {
  font-size: 2.92rem;
  line-height: 110%;
  margin: 1.46rem 0 1.168rem 0;
}

h4 {
  font-size: 2.28rem;
  line-height: 110%;
  margin: 1.14rem 0 0.912rem 0;
}

h5 {
  font-size: 1.64rem;
  line-height: 110%;
  margin: 0.82rem 0 0.656rem 0;
}

h6 {
  font-size: 1rem;
  line-height: 110%;
  margin: 0.5rem 0 0.4rem 0;
}

em {
  font-style: italic;
}

strong {
  font-weight: 500;
}

small {
  font-size: 75%;
}

.light {
  font-weight: 300;
}

.thin {
  font-weight: 200;
}

/*
* ------------------------------------------------------------------------------------------------- DO NOT MODIFY THIS FILE!
* This CSS maps the layout attributes and the flex-item attributes to the style information.
*/
/*******************************
Flex Layout
*******************************/
html [layout], html [layout][horizontal], html [layout][vertical] {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

html [layout][horizontal] {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
      flex-direction: row;
}

html [layout][vertical] {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
      flex-direction: column;
}

html [flex] {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  -ms-flex-preferred-size: 1e-9px;
      flex-basis: 1e-9px;
}

/* alignment in cross axis */
html [layout][cross-center], html [layout][center-center] {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

html [layout][cross-end] {
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end;
}

/* alignment in main axis */
html [layout][main-center], html [layout][center-center] {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

html [layout][main-justified] {
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

html [layout][main-distributed] {
  -ms-flex-pack: distribute;
      justify-content: space-around;
}

/*******************************
Other Layout
*******************************/
/* ie support for hidden */
html [hidden] {
  display: none !important;
}

html [relative] {
  position: relative;
}

/** Header **/
.header {
  height: 64px;
  background: #009688;
  -webkit-box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);
          box-shadow: 0 0 4px rgba(0, 0, 0, 0.14), 0 4px 8px rgba(0, 0, 0, 0.28);
  padding: 0 16px;
  z-index: 2;
}

.header_title {
  font-size: 32px;
  line-height: 64px;
  color: #FFF;
  margin: 0;
  padding: 0;
}

.header_version-display {
  font-size: 14px;
  color: #FFF;
}

[navigation] {
  /*
  * And let's fade it in from the left
  */
}
@media (max-width: 700px) {
  [navigation] [menuToggle] {
    display: block;
    position: relative;
    z-index: 1;
    top: 3px;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
  }
}
[navigation] input {
  display: none;
}
@media (max-width: 700px) {
  [navigation] input {
    display: block;
    width: 40px;
    height: 32px;
    position: absolute;
    top: -7px;
    left: -5px;
    cursor: pointer;
    opacity: 0;
    /* hide this */
    z-index: 2;
    /* and place it over the hamburger */
    -webkit-touch-callout: none;
  }
  [navigation] input:checked ~ ul {
    -webkit-transform: scale(1, 1);
            transform: scale(1, 1);
    opacity: 1;
  }
  [navigation] input:checked ~ span {
    opacity: 1;
    -webkit-transform: rotate(45deg) translate(-2px, -1px);
            transform: rotate(45deg) translate(-2px, -1px);
    background: #232323;
  }
  [navigation] input:checked ~ span:nth-last-child(3) {
    opacity: 0;
    -webkit-transform: rotate(0deg) scale(0.2, 0.2);
            transform: rotate(0deg) scale(0.2, 0.2);
  }
  [navigation] input:checked ~ span:nth-last-child(2) {
    opacity: 1;
    -webkit-transform: rotate(-45deg) translate(0, -1px);
            transform: rotate(-45deg) translate(0, -1px);
  }
}
[navigation] span {
  display: none;
}
@media (max-width: 700px) {
  [navigation] span {
    display: block;
    width: 33px;
    height: 4px;
    margin-bottom: 5px;
    position: relative;
    background: #FFF;
    border-radius: 3px;
    z-index: 1;
    -webkit-transform-origin: 4px 0px;
            transform-origin: 4px 0px;
    -webkit-transition: background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease;
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), opacity 0.55s ease, -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
  }
  [navigation] span:first-child {
    -webkit-transform-origin: 0% 0%;
            transform-origin: 0% 0%;
  }
  [navigation] span:nth-last-child(2) {
    -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
  }
}
[navigation] .options {
  list-style-type: none;
  height: 100%;
}
[navigation] .options > li {
  display: inline-block;
  height: 100%;
}
[navigation] .options a {
  color: #FFF;
  text-transform: uppercase;
  height: 100%;
  padding: 8px;
  display: inline-block;
  line-height: 48px;
  border-bottom: 3px solid transparent;
}
[navigation] .options a.active {
  border-bottom: 3px solid #FFC107;
}
[navigation] .options a:hover {
  border-bottom: 3px solid #FFF;
}
@media (max-width: 700px) {
  [navigation] .options {
    padding-top: 64px;
    position: fixed;
    display: block;
    width: 100vw;
    height: 100vh;
    right: 0;
    top: 0;
    background: #ededed;
    list-style-type: none;
    -webkit-font-smoothing: antialiased;
    /* to stop flickering of text in safari */
    -webkit-transform-origin: 0% 0%;
            transform-origin: 0% 0%;
    -webkit-transform: translate(100%, 0);
            transform: translate(100%, 0);
    -webkit-transition: -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
    transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1), -webkit-transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1);
  }
  [navigation] .options > li {
    display: block;
    height: auto;
    text-align: center;
  }
  [navigation] .options a {
    color: #222;
    height: auto;
    width: 100%;
    display: block;
  }
  [navigation] .options a.active {
    color: #FFC107;
    border: none;
  }
  [navigation] .options a:hover {
    background: #CCC;
    border: none;
  }
}

/** Footer **/
.footer {
  height: 40px;
  background: #222;
  color: rgba(255, 255, 255, 0.87);
  padding: 0 16px;
}
.footer a {
  color: rgba(255, 255, 255, 0.87);
  font-weight: bold;
}

/** Content **/
[viewport] {
  min-height: calc(100% - 104px);
}
@media (max-width: 900px) {
  [viewport] {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
    min-height: 0;
  }
}

[main] {
  padding: 16px;
  overflow-y: auto;
}
@media (max-width: 900px) {
  [main] {
    overflow: initial;
  }
}
@media (max-width: 599px) {
  [main] > [layout] .chart-legend {
    width: 100%;
  }
}
@media (max-width: 599px) {
  [main] > [layout] {
    -webkit-box-orient: vertical !important;
    -webkit-box-direction: normal !important;
        -ms-flex-direction: column !important;
            flex-direction: column !important;
  }
}

/** Error **/
.error {
  position: fixed;
  left: 20px;
  bottom: 50px;
  background-color: #323232;
  padding: 12px 24px 17px 24px;
  vertical-align: middle;
  color: #fff;
  -webkit-box-shadow: 0 7px 18px rgba(0, 0, 0, 0.2);
          box-shadow: 0 7px 18px rgba(0, 0, 0, 0.2);
}
.error:empty {
  display: none;
}

/** Inputs **/
input[type=number],
input[type=text],
input[type=password],
input[type=datetime-local] {
  width: 100%;
  max-width: 280px;
  margin: 16px 0;
  display: block;
  border: none;
  padding: 18px 0 10px;
  border-bottom: solid 1px #009688;
  -webkit-transition: all 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
  transition: all 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(96%, rgba(255, 255, 255, 0)), color-stop(4%, #009688));
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #009688 4%);
  background-position: -100% 0;
  background-size: 100% 100%;
  background-repeat: no-repeat;
  color: #00302c;
}
input[type=number]:focus,
input[type=text]:focus,
input[type=password]:focus,
input[type=datetime-local]:focus {
  -webkit-box-shadow: none;
          box-shadow: none;
  outline: none;
  background-position: 0 0;
}
input[type=number]:focus::-webkit-input-placeholder,
input[type=text]:focus::-webkit-input-placeholder,
input[type=password]:focus::-webkit-input-placeholder,
input[type=datetime-local]:focus::-webkit-input-placeholder {
  color: #009688;
  font-size: 11px;
  -webkit-transform: translateY(-20px);
          transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus:-ms-input-placeholder,
input[type=text]:focus:-ms-input-placeholder,
input[type=password]:focus:-ms-input-placeholder,
input[type=datetime-local]:focus:-ms-input-placeholder {
  color: #009688;
  font-size: 11px;
  transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus::-ms-input-placeholder,
input[type=text]:focus::-ms-input-placeholder,
input[type=password]:focus::-ms-input-placeholder,
input[type=datetime-local]:focus::-ms-input-placeholder {
  color: #009688;
  font-size: 11px;
  transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:focus::placeholder,
input[type=text]:focus::placeholder,
input[type=password]:focus::placeholder,
input[type=datetime-local]:focus::placeholder {
  color: #009688;
  font-size: 11px;
  -webkit-transform: translateY(-20px);
          transform: translateY(-20px);
  visibility: visible !important;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
}
input[type=number]:invalid,
input[type=text]:invalid,
input[type=password]:invalid,
input[type=datetime-local]:invalid {
  background: -webkit-gradient(linear, left top, left bottom, color-stop(96%, rgba(255, 255, 255, 0)), color-stop(4%, red));
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, red 4%);
}

/** Utils **/
.hide {
  display: none !important;
}

/** Buttons **/
.btn {
  display: inline-block;
  position: relative;
  cursor: pointer;
  height: 35px;
  line-height: 35px;
  padding: 0 1.5rem;
  font-size: 15px;
  font-weight: 600;
  letter-spacing: 0.8px;
  text-align: center;
  text-transform: uppercase;
  vertical-align: middle;
  white-space: nowrap;
  outline: none;
  border: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-transition: all 0.3s ease-out;
  transition: all 0.3s ease-out;
  background-color: transparent;
  margin-right: 8px;
}
.btn[disabled] {
  color: #BDBDBD;
}
.btn[disabled]:hover {
  background-color: transparent;
  cursor: not-allowed;
}

.btn--raised {
  background-color: #009688;
  color: #fff;
  -webkit-box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}
.btn--raised:hover {
  background-color: #00635a;
}

.btn--primary {
  color: #009688;
}

.btn:hover {
  background-color: rgba(153, 153, 153, 0.2);
  cursor: pointer;
}

.card {
  display: block;
  -webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  -webkit-transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  padding: 16px;
  position: relative;
  margin-bottom: 16px;
}

.card:hover {
  -webkit-box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
          box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
}

.card-footer {
  padding: 16px 0 0;
  margin: 8px 0 0;
  border-top: 1px solid #CCC;
  text-align: right;
}

.inline-header {
  width: 140px;
  min-width: 140px;
  font-weight: bold;
  padding-right: 8px;
}

.small-heading {
  font-size: 20px;
  padding: 16px 0 8px;
}

/** Modal **/
.modal {
  display: none;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow-y: auto;
  overflow-x: hidden;
  z-index: 1000;
  -webkit-transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
  -webkit-transition-delay: 0s;
          transition-delay: 0s;
  background: rgba(0, 0, 0, 0.3);
}

.modal-content {
  position: relative;
  padding: 2.4rem;
  background: #FFF;
  background-clip: padding-box;
  -webkit-box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.25);
          box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.25);
  -webkit-transition: all 0.25s cubic-bezier(0.23, 1, 0.32, 1);
  transition: all 0.25s cubic-bezier(0.23, 1, 0.32, 1);
  max-width: 600px;
  padding: 2rem;
}
.modal-content h2.message {
  font-size: 18px;
  font-weight: bold;
  text-transform: uppercase;
}

*:before, *:after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

@-webkit-keyframes ripple {
  0% {
    -webkit-box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0);
            box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0);
  }
  50% {
    -webkit-box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0.1);
            box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0.1);
  }
  100% {
    -webkit-box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0);
            box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0);
  }
}

@keyframes ripple {
  0% {
    -webkit-box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0);
            box-shadow: 0px 0px 0px 1px rgba(0, 0, 0, 0);
  }
  50% {
    -webkit-box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0.1);
            box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0.1);
  }
  100% {
    -webkit-box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0);
            box-shadow: 0px 0px 0px 15px rgba(0, 0, 0, 0);
  }
}
.md-radio {
  margin: 8px 0 16px;
}
.md-radio.md-radio-inline {
  display: inline-block;
}
.md-radio input[type=radio] {
  display: none;
}
.md-radio input[type=radio]:checked + label:before {
  border-color: #009688;
  -webkit-animation: ripple 0.2s linear forwards;
          animation: ripple 0.2s linear forwards;
}
.md-radio input[type=radio]:checked + label:after {
  -webkit-transform: scale(1);
          transform: scale(1);
}
.md-radio label {
  display: inline-block;
  height: 20px;
  position: relative;
  padding: 0 30px;
  margin-bottom: 0;
  cursor: pointer;
  vertical-align: bottom;
}
.md-radio label:before, .md-radio label:after {
  position: absolute;
  content: "";
  border-radius: 50%;
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  -webkit-transition-property: border-color, -webkit-transform;
  transition-property: border-color, -webkit-transform;
  transition-property: transform, border-color;
  transition-property: transform, border-color, -webkit-transform;
}
.md-radio label:before {
  left: 0;
  top: 0;
  width: 20px;
  height: 20px;
  border: 2px solid rgba(0, 0, 0, 0.54);
}
.md-radio label:after {
  top: 5px;
  left: 5px;
  width: 10px;
  height: 10px;
  -webkit-transform: scale(0);
          transform: scale(0);
  background: #009688;
}

/** Switch **/
.switch-input {
  display: none;
}

.switch-label {
  position: relative;
  display: inline-block;
  min-width: 148px;
  cursor: pointer;
  font-weight: 500;
  text-align: left;
  margin: 0;
  padding: 4px 0 4px 44px;
}

.switch-label:before, .switch-label:after {
  content: "";
  position: absolute;
  margin: 0;
  outline: 0;
  top: 50%;
  -webkit-transform: translate(0, -50%);
          transform: translate(0, -50%);
  -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
}

.switch-label:before {
  left: 1px;
  width: 34px;
  height: 14px;
  background-color: #DDD;
  border-radius: 8px;
}

.switch-label:after {
  left: 0;
  width: 20px;
  height: 20px;
  background-color: #FAFAFA;
  border-radius: 50%;
  -webkit-box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
          box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
}

.switch-input:checked + .switch-label:after {
  background-color: #4CAF50;
  -webkit-transform: translate(80%, -50%);
          transform: translate(80%, -50%);
}

.switch-input:checked + label[for=beer-temp].switch-label:after {
  background-color: #29aa29;
}

.switch-input:checked + label[for=beer-set].switch-label:after {
  background-color: #f06464;
}

.switch-input:checked + label[for=fridge-temp].switch-label:after {
  background-color: #59b8ff;
}

.switch-input:checked + label[for=fridge-set].switch-label:after {
  background-color: #ffa14c;
}

.switch-input:checked + label[for=room-temp].switch-label:after {
  background-color: #AAAAAA;
}

.switch-input:checked + label[for=gravity].switch-label:after {
  background-color: #990099;
}

.switch-input:checked + label[for=aux-temp].switch-label:after {
  background-color: #f5e127;
}

.switch-input:checked + label[for=filtersg].switch-label:after {
  background-color: #000abb;
}

.switch-input:checked + label[for=pressure].switch-label:after {
  background-color: #0000EE;
}

.switch-input:checked + label[for=pressure-set].switch-label:after {
  background-color: #f06464;
}

.switch-input:checked + label[for=carbonation].switch-label:after {
  background-color: #AAAAAA;
}

.switch-input:checked + label[for=humidity].switch-label:after {
  background-color: #2222DD;
}

.switch-input:checked + label[for=humidity-set].switch-label:after {
  background-color: #EE1111;
}

.switch-input:checked + label[for=room-humidity].switch-label:after {
  background-color: #AAAAAA;
}

.mdl-data-table th {
  padding: 8px;
  white-space: nowrap;
  color: rgba(0, 0, 0, 0.541176);
  font-weight: bold;
  font-family: Helvetica, Arial, sans-serif;
  font-size: 17px;
  text-align: left;
}
.mdl-data-table tr {
  height: auto;
}
.mdl-data-table tr:nth-child(even) {
  background-color: #eee;
}
.mdl-data-table td {
  padding: 8px;
}

textarea {
  display: block;
  width: 100%;
  border: 0;
  padding: 10px 5px;
  background: white no-repeat;
  /*
  * IMPORTANT PART HERE
  */
  /* 2 imgs : 1px gray line (normal state) AND 2px green line (focus state) */
  background-image: -webkit-gradient(linear, left top, left bottom, from(#009688), to(#009688)), -webkit-gradient(linear, left top, left bottom, from(silver), to(silver));
  background-image: linear-gradient(to bottom, #009688, #009688), linear-gradient(to bottom, silver, silver);
  /* sizes for the 2 images (default state) */
  background-size: 0 2px, 100% 1px;
  /* positions for the 2 images. Change both "50%" to "0%" or "100%" and tri again */
  background-position: 50% 100%, 50% 100%;
  /* animation solely on background-size */
  -webkit-transition: background-size 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
  transition: background-size 0.3s cubic-bezier(0.64, 0.09, 0.08, 1);
}

textarea:focus {
  /* sizes for the 2 images (focus state) */
  background-size: 100% 3px, 100% 1px;
  outline: none;
}

.hint {
  padding-left: 140px;
  margin-top: 0;
  padding-top: 0;
  font-style: italic;
  color: #757575;
  font-size: 12px;
}

#formatlist {
  display: none;
  position: absolute;
  border: 1px solid white;
  background: lightgray;
}

.listgrid {
  margin: 4px;
}

/*# sourceMappingURL=style-logging.css.map */
</style>
</head>

<body onload="init();">

    <header layout horizontal main-justified cross-center relative class="header">
    <h1 class="header_title"><span id="hostname">BrewPiLess</span> <span id="verinfo" class="header_version-display"></span></h1>
    <div navigation>
        <div menutoggle>
            <input type="checkbox">
            <span></span>
            <span></span>
            <span></span>
            <ul class="options">
                <li>
                    <a href="/index.htm">
                        graph
                    </a>
                </li>
                <li>
                    <a href="/control.htm">
                        control
                    </a>
                </li>
                <li>
                    <a href="/logging.htm">
                        logs
                    </a>
                </li>
                <li>
                    <a href="/setup.htm">
                        Device
                    </a>
                </li>
                <li>
                    <a href="/config.htm">
                        System
                    </a>
                </li>
                <li>
                    <a href="/gravity.htm">
                        gravity
                    </a>
                    </li><li>
                        <a href="/pressure.htm">
                            Pressure
                        </a>
                    </li>
     
                
            </ul>
        </div>
    </div>
</header>

    <div viewport>
        <div main flex>
            <h4>
                BrewPiless Logging Setting
            </h4>
            <div class="card">
                <h5>
                    Local Log
                </h5>

                <div id="logstartinput">
                    <div id="logctrl" layout horizontal cross-center>
                        <h6 class="inline-header">
                            New Log Name:
                        </h6>
                        <input type="text" id="logname" size="24" maxlength="24">
                        <button id="startlogbutton" class="btn btn--raised">Start Logging</button>
                    </div>
                    <div layout horizontal cross-center>
                        <h6 class="inline-header">
                            Options:
                        </h6>
                    </div>
                    <div layout horizontal cross-center>
                        <h6 class="inline-header">
                            Write on Buffer Full
                        </h6>
                        <div>
                            <input type="checkbox" id="wobf" name="cbpl" class="switch-input" checked="checked">
                            <label for="wobf" class="switch-label" style="min-width: 0;"></label>
                        </div>
                    </div>
                    <div layout horizontal cross-center>
                        <h6 class="inline-header">
                            Calibrate iSpindel
                        </h6>
                        <div>
                            <input type="checkbox" id="calispindel" name="cbpl" class="switch-input" checked="checked">
                            <label for="calispindel" class="switch-label" style="min-width: 0;"></label>
                        </div>
                    </div>
                    <div layout horizontal cross-center>
                        <h6 class="inline-header">
                            Tilt value in water
                        </h6>
                        <input type="text" id="tiltinw" size="6">
                    </div>
                    <div layout horizontal cross-center class="tiltwatercorrect">
                        <h6 class="inline-header">
                            Hydrometer reading:
                        </h6>
                        <input type="text" id="hydrometer" size="6" value="1.0">
                    </div>
                    <div layout horizontal cross-center class="tiltwatercorrect">
                        <h6 class="inline-header">
                            , or water @
                        </h6><input type="text" id="watertemp" size="4">&deg;
                        calibrated <input type="text" id="caltemp" size="4">&deg;
                            <select id="tempunit"><option value="C">C</option><option value="F">F</option></select>

                    </div>
                </div>

                <div id="logstopinput" style="display:none">
                    Recording <strong id="loggingtitle"></strong>
                        since <strong id="start-log-date"></strong>
                            <button id="stoplogbutton" class="btn btn--raised">Stop Logging</button>
                </div>


                <div id="fsinfo">
                    Free Space:
                        <span id="fsfree">0</span> Bytes,
                        Used Space:
                            <span id="fsused">0</span> Bytes,
                            Total Space:
                                <span id="fssize">0</span> Bytes
                </div>

                <h5 class="small-heading">
                    Recorded Log
                </h5>

                <table id="loglist" class="mdl-data-table">
                    <tr>
                        <th>
                            Log
                        </th>
                        <th>
                            Date
                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                    <tr>
                        <td class="logid"></td>
                        <td class="logdate"></td>
                        <td>
                            <button class="dlbutton btn btn--raised">Download</button>
                            <button class="rmbutton btn btn--raised">Delete</button>
                        </td>
                    </tr>
                </table>
            </div>

            <div class="card">
                <div layout horizontal main-justified cross-center>
                    <h5>
                        Remote Log
                    </h5>
                    <div>
                        <input type="checkbox" id="enabled" name="enabled" class="switch-input" checked="checked">
                        <label for="enabled" class="switch-label" style="min-width: 0;"></label>
                    </div>
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Log time period:
                    </h6>
                    <input type="text" id="period" size="4">
                    Seconds
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Service Type:
                    </h6>
                    <div>
                        <select id="service-type" name="service" onchange="serviceChange()">
                            <option value="generichttp"> Generic HTTP </option>
                            <option value="thingspeak"> thingspeak.com </option>
                            <option value="ubidots"> ubidots.com </option>
                            <option value="brewfather"> Brewfather </option>
                            <option value="brewersfriend"> Brewer'sFriend </option>
                        </select>
                    </div>

                </div>


                <div id="service-opt">
                    <div id="brewersfriend" class="service-options">
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                API Key:
                            </h6>
                            <input type="text" id="brewersfriend-apikey" size="42">
                        </div>
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Beer:
                            </h6>
                            <input type="text" id="brewersfriend-beer" size="42">
                        </div>

                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Gravity Unit
                            </h6>

                            <div class="md-radio md-radio-inline">
                                <input id="gu-sg" type="radio" name="BF-gu" value="gu-sg" checked="checked">
                                <label for="gu-sg">SG(1.x)</label>
                            </div>
                            <div class="md-radio md-radio-inline">
                                <input id="gu-plato" type="radio" name="BF-gu" value="gu-plato">
                                <label for="gu-plato">Plato(&deg;P)</label>
                            </div>
                        </div>
                    </div>

                    <div id="thingspeak" class="service-options">
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Write API Key:
                            </h6>
                            <input type="text" id="thingspeak-apikey" size="42">

                        </div>
                        <div>
                            <h6 class="inline-header">
                                Fields:
                            </h6>
                            <div>

                                <span class="listgrid">
                                            <label for="thingspeak-f1">Field 1:</label>
                                            <select name="thingspeak-f1">
                                            <option value="unused"> Unused </option>
                                            <option value="b"> Beer Temperature </option>
                                            <option value="B"> Beer Setting </option>
                                            <option value="f"> Fridge Temperature </option>
                                            <option value="F"> Fridge Setting </option>
                                            <option value="r"> Room Temperature </option>
                                            <option value="g"> Gravity </option>
                                            <option value="p"> Plato </option>
                                            <option value="a"> iSpindel Temperature </option>
                                            <option value="v"> iSpindel voltage </option>
                                            <option value="t"> Tilt value </option>
                                            <option value="P"> Pressure in PSI</option>
                                            <option value="m"> mode in integer</option>

                                        </select>
                                            </span>
                                <span class="listgrid">
                                                    <label for="thingspeak-f2">Field 2:</label>
                                                    <select name="thingspeak-f2">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>
        
                                                </select>
                                            </span>

                                <span class="listgrid">
                                                    <label for="thingspeak-f3">Field 3:</label>
                                                    <select name="thingspeak-f3">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>
        
                                                </select>
                                            </span>
                                <br>
                                <span class="listgrid">
                                                    <label for="thingspeak-f4">Field 4:</label>
                                                    <select name="thingspeak-f4">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>
        
                                                </select>
                                            </span>

                                <span class="listgrid">
                                                    <label for="thingspeak-f5">Field 5:</label>
                                                    <select name="thingspeak-f5">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>
        
                                                    </select>
                                            </span>

                                <span class="listgrid">
                                                    <label for="thingspeak-f6">Field 6:</label>
                                                    <select name="thingspeak-f6">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>
        
                                                </select>
                                            </span>
                                <br>
                                <span class="listgrid">
                                                    <label for="thingspeak-f7">Field 7:</label>
                                                    <select name="thingspeak-f7">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>


                                                </select>
                                            </span>
                                <span class="listgrid">
                                                    <label for="thingspeak-f8">Field 8:</label>
                                                    <select name="thingspeak-f8">
                                                    <option value="unused"> Unused </option>
                                                    <option value="b"> Beer Temperature </option>
                                                    <option value="B"> Beer Setting </option>
                                                    <option value="f"> Fridge Temperature </option>
                                                    <option value="F"> Fridge Setting </option>
                                                    <option value="r"> Room Temperature </option>
                                                    <option value="g"> Gravity </option>
                                                    <option value="p"> Plato </option>
                                                    <option value="a"> iSpindel Temperature </option>
                                                    <option value="v"> iSpindel voltage </option>
                                                    <option value="t"> Tilt value </option>
                                                    <option value="P"> Pressure in PSI</option>
                                                    <option value="m"> mode in integer</option>

                                                </select>
                                                    </span>

                            </div>

                        </div>
                    </div>

                    <div id="brewfather" class="service-options">
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                ID:
                            </h6>
                            <input type="text" id="brewfather-id" size="42">
                        </div>
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Device Label:
                            </h6>
                            <input type="text" id="brewfather-device" size="42">
                        </div>
                    </div>

                    <div id="ubidots" class="service-options">
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Account:
                            </h6>
                            <select name="ubidots-account" class="nb">
                                                        <option value="1">Educational</option>
                                                        <option value="2">Industrial</option>
                                                    </select>

                        </div>
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Token:
                            </h6>
                            <input type="text" id="ubidots-token" size="42">
                        </div>
                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Device:
                            </h6>
                            <input type="text" id="ubidots-device" size="42">
                        </div>
                    </div>

                    <div id="generichttp" class="service-options">

                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Method:
                            </h6>
                            <div class="md-radio md-radio-inline">
                                <input id="m_get" type="radio" name="method" checked="checked" onchange="cmethod(this);">
                                <label for="m_get">GET</label>
                            </div>
                            <div class="md-radio md-radio-inline">
                                <input id="m_post" type="radio" name="method" onchange="cmethod(this);">
                                <label for="m_post">POST</label>
                            </div>
                            <div class="md-radio md-radio-inline">
                                <input id="m_put" type="radio" name="method" onchange="cmethod(this);">
                                <label for="m_put">PUT</label>
                            </div>
                        </div>

                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                URL:
                            </h6>
                            <input type="text" id="url" size="128" placeholder="input link" onchange="checkurl(this);">
                        </div>

                        <div layout horizontal cross-center>
                            <h6 class="inline-header">Data Type:</h6>
                            <input type="text" id="data-type" size="42" placeholder="Content-Type">
                        </div>
                        <p class="hint">JSON:"application/json", Form Type:"application/x-www-form-urlencoded"</p>

                        <div layout horizontal cross-center>
                            <h6 class="inline-header">
                                Format:
                            </h6>
                            <div layout vertical style="width: 100%;">
                                <textarea id="format" rows="4" cols="64" oninput="checkformat(this)"></textarea>
                                <div layout horizontal main-justified cross-center>
                                    <span onmouseover="showformat(this)" onmouseout="hideformat()">
                                <u>Notations...</u>
                            </span>
                                    <span>
                                Characters:
                                <span id="fmthint">0/256</span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" onclick="update();" class="btn btn--raised">Update</button>
                </div>

            </div>
            <div id="mqtt" class="card">
                <div layout horizontal main-justified cross-center>
                    <h4>
                        MQTT Settings
                    </h4>
                </div>

                <div layout horizontal cross-center>
                    <h5>
                        Broker Settings
                    </h5>
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        MQTT Broker:
                    </h6>
                    <input name="mqtt_server" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        MQTT Port:
                    </h6>
                    <input name="mqtt_port" type="text" size="5" maxlength="5" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Username:
                    </h6>
                    <input name="mqtt_user" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Password:
                    </h6>
                    <input name="mqtt_pass" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal main-justified cross-center>
                    <h5>
                        Reporting
                    </h5>
                    <div>
                        <input type="checkbox" id="mqtt_log" name="mqtt_log" class="switch-input mqtt-input" checked="checked">
                        <label for="mqtt_log" class="switch-label" style="min-width: 0;"></label>
                    </div>
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Publish Period
                    </h6>
                    <input type="text" id="mqtt_period" name="mqtt_period" size="4" class="mqtt-input">
                    Seconds
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Base Path
                    </h6>
                    <input name="mqtt_base" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Report data as
                    </h6>
                    <div>
                        <select name="mqtt_format" class="mqtt-input">
                            <option value="0">Individual Topic</option>
                            <option value="1">Whole as JSON</option>
                        </select>
                    </div>
                </div>


                <div layout horizontal main-justified cross-center>
                    <h5>
                         MQTT Remote Control
                    </h5>
                    <div>
                        <input type="checkbox" id="mqtt_enabled" name="mqtt_enabled" class="switch-input mqtt-input" checked="checked">
                        <label for="mqtt_enabled" class="switch-label" style="min-width: 0;"></label>
                    </div>
                </div>


                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Path for mode:
                    </h6>
                    <input name="mqtt_mode" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Path for beerSet:
                    </h6>
                    <input name="mqtt_beerset" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Path for fridgeSet:
                    </h6>
                    <input name="mqtt_fridgeset" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>


                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Path for Spunding control:
                    </h6>
                    <input name="mqtt_cap" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>

                <div layout horizontal cross-center>
                    <h6 class="inline-header">
                        Path for PTC temperature:
                    </h6>
                    <input name="mqtt_ptc" type="text" size="32" maxlength="64" class="nb mqtt-input">
                </div>
                <div class="card-footer">
                    <input type="submit" id="submitsavemqtt" name="submit" class="btn btn--raised">
                </div>
            </div>

        </div>
    </div>

    <footer layout horizontal main-justified cross-center class="footer">
    <span>BrewPiLess by <a href="https://github.com/vitotai/">vitotai</a></span>
    <span><a href="https://github.com/vitotai/BrewPiLess/">project on GitHub</a></span>
</footer>

    <!-- Formatlist -->
    <div id="formatlist">
        <table class="mdl-data-table">
            <tr>
                <th>%b</th>
                <td>
                    Beer Temperature
                </td>
            </tr>
            <tr>
                <th>%B</th>
                <td>
                    Beer Setting
                </td>
            </tr>
            <tr>
                <th>%f</th>
                <td>
                    Fridge Temperature
                </td>
            </tr>
            <tr>
                <th>%F</th>
                <td>
                    Fridge Setting
                </td>
            </tr>
            <tr>
                <th>%r</th>
                <td>
                    Room Temperature
                </td>
            </tr>
            <tr>
                <th>%g</th>
                <td>
                    Gravity
                </td>
            </tr>
            <tr>
                <th>%p</th>
                <td>
                    Plato
                </td>
            </tr>
            <tr>
                <th>%a</th>
                <td>
                    iSpindel Temperature
                </td>
            </tr>
            <tr>
                <th>%v</th>
                <td>
                    iSpindel voltage
                </td>
            </tr>
            <tr>
                <th>%t</th>
                <td>
                    Tilt value
                </td>
            </tr>
            <tr>
                <th>%u</th>
                <td>
                    Unix timestamp of last gravity update
                </td>
            </tr>

            <tr>
                <th>%U</th>
                <td>
                    Temperature Unit
                </td>
            </tr>

            <tr>
                <th>%m</th>
                <td>
                    mode in integer
                </td>
            </tr>

            <tr>
                <th>%M</th>
                <td>
                    mode in character
                </td>
            </tr>

            <tr>
                <th>%P</th>
                <td>
                    Pressure in PSI
                </td>
            </tr>
            <tr>
                <th>%H</th>
                <td>
                   Hostname
                </td>
            </tr>

        </table>
    </div>

</body>

</html>